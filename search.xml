<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[旋转的八卦图]]></title>
    <url>%2F2018%2F09%2F17%2F%E6%97%8B%E8%BD%AC%E7%9A%84%E5%85%AB%E5%8D%A6%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[利用JS或CSS3结合Canvas实现八卦图旋转]]></content>
      <categories>
        <category>Canvas</category>
        <category>JavaScript</category>
        <category>Css</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Canvas</tag>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生JS实现跑马灯]]></title>
    <url>%2F2018%2F09%2F17%2F%E8%B7%91%E9%A9%AC%E7%81%AF%2F</url>
    <content type="text"><![CDATA[原生JS实现跑马灯]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[贪吃蛇了解一下]]></title>
    <url>%2F2018%2F09%2F15%2F%E8%B4%AA%E5%90%83%E8%9B%87%2F</url>
    <content type="text"><![CDATA[利用Canvas与JavaScript实现贪吃蛇]]></content>
      <categories>
        <category>Canvas</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生JS实现回到页面顶部]]></title>
    <url>%2F2018%2F09%2F14%2F%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%2F</url>
    <content type="text"><![CDATA[实现效果1.右下角按钮回到顶部(点击后按钮消失，随即页面滑动到顶部;页面下拉距离超过一屏幕显示回到顶部按钮，反之按钮消失) 2.列表hover时显示随机颜色(利用时间委托机制) 3.点击左侧列表，页面滑动到对应模块(通过获取所点击列表的ID值滑动到对应CLASS值相同的模块) 点击查看源代码 代码分析回到顶部按钮1.获取当前scrollTop距离（var distance=document.documentElement.scrollTop||document.body.scrollTop） 2.总时间(var timer=500;单位：ms) 总共需要运动500ms 3.频率( var frequency=10;单位：ms) 每10ms运动一次 4.步长(var step=distance/timer*frequency) 每毫秒运动距离*频率=每一次运动所需步长 回到顶部代码1234567891011121314151617181920212223242526272829303132333435363738394041424344var span = document.getElementsByTagName(&apos;span&apos;)[0];var i = document.getElementsByTagName(&apos;i&apos;)[0];var timer = 1000; //总时间var frequency = 5; //频率window.onscroll = show;function show() &#123; var dis = document.documentElement.scrollTop || document.body.scrollTop; var windis = window.screen.height; //屏幕分辨率高度 // console.log(windis); //当前滚动条距离大于一个屏幕高度时显示回到顶部按钮 if (dis &gt;= windis) &#123; span.style.display = &apos;block&apos;; i.style.display = &apos;block&apos;; &#125; else &#123; //当前滚动条距离小于一个屏幕高度时隐藏回到顶部按钮 span.style.display = &apos;none&apos;; i.style.display = &apos;none&apos;; &#125;&#125;;span.addEventListener(&apos;click&apos;, function (e) &#123; span.style.display = &apos;none&apos;; //单击后虽然设置为隐藏，但是由于滚动条顶部距离大于屏幕高度又触发上一个事件，使其又显示，所以当点击时需要阻止上一个事件发生； i.style.display = &apos;none&apos;; window.onscroll = null; //点击后阻止前一个DOM 0级事件 二级事件无法用此方法阻止 e = e || event; var disTop = document.documentElement.scrollTop || document.body.scrollTop; //获取运动前滚动条顶部距离 var step = (disTop / timer) * frequency; //步长 //定时器：每隔一定频率运动距离 var intime = window.setInterval(function () &#123; var curTop = document.documentElement.scrollTop || document.body.scrollTop; //获取滚动时当前滚动条距离 if (curTop === 0) &#123; window.clearInterval(intime); //当距离为0时清除定时器 window.onscroll = show; return; //中断执行 &#125; else &#123; curTop -= step; //使当前滚动条距离每隔frequency时间在当前距离基础上减去原始步长 &#125; //每隔frequency时间设置一次滚动条距离 document.documentElement.scrollTop = curTop; document.body.scrollTop = curTop; &#125;, frequency);&#125;); 列表随机颜色1.利用事件委托机制给父级DIV加一个mouseover事件 2.mouseover在其子对象li上时触发事件，获取触发事件的目标(var elem = e.target;),对此目标进行操作 3.定义一个数组存放十六进制数，用于组成随机十六进制颜色，生成6个随机数(0-15)作为数组下标，将对应值存入一个空数组并转为字符串，即为十六进制颜色。 随机颜色代码12345678910111213141516171819202122232425var items = document.getElementsByTagName(&apos;li&apos;);var ul = document.getElementsByTagName(&apos;ul&apos;);// console.log(ul[0]);//事件委托：给父元素添加触发事件ul[0].addEventListener(&apos;mouseover&apos;, function (e) &#123; e = e || event; var elem = e.target; //获取目标 elem.style.background = null; // 每一次触发事件都先初始化 var num = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; //十六进制颜色 var colorNum = []; do &#123; var randomNum = Math.floor(Math.random() * 16); //0-15 //随机的0-15之间的一个数字作为十六进制数组下标 colorNum.push(num[randomNum]); &#125; while (colorNum.length &lt; 6); //将获取的6个随机数到空数组 // console.log(colorNum); var colorstr = colorNum.join(&apos;&apos;); //转为字符串 // console.log(colorstr); elem.style.background = &quot;#&quot; + colorstr; //设置随机颜色&#125;);//鼠标离开时清空颜色ul[0].addEventListener(&apos;mouseout&apos;, function (e) &#123; e = e || event; var elem = e.target; elem.style.background = null;&#125;); 滑动模块1.与获取随机颜色原理相同，需要利用事件委托，通过给父元素DIV加点击事件获取目标事件 2.获取所点击目标的ID值，寻找模块中CLASS值与ID值相同的模块，并获取其距离顶部高度 3.需要设置过渡动画效果则与按钮部分相同需要设置运动总时间、总距离、频率等 滑动模块代码12345678910111213141516171819202122232425262728293031ul[0].addEventListener(&apos;click&apos;, function (e) &#123; e = e || event; var liElem = e.target; //利用时间委托获取目标 var liName = liElem.getAttribute(&apos;id&apos;) //获取目标id值 var divName = document.getElementsByClassName(liName)[0]; //获取对应名称的DIV模块元素 var top = divName.offsetTop; //获取对应的滚动条高度 var timer = 500; //总时间 var frequencytwo = 3; //频率 if (top &lt; timer) &#123; top += 500; &#125; var stepgo = (top / timer) * frequencytwo; //步长 //定时器：每隔一定频率运动距离 var intn = window.setInterval(function () &#123; var curTop = document.documentElement.scrollTop || document.body.scrollTop; //获取滚动时当前滚动条距离 if (curTop === top) &#123; window.clearInterval(intn); //当两者相同时清除定时器 return; //中断执行 &#125; if (curTop &gt; top) &#123; curTop -= stepgo; //使当前滚动条距离每隔frequency时间在当前距离基础上减去原始步长 &#125; if (curTop &lt; top) &#123; curTop += stepgo; &#125; //每隔frequency时间设置一次滚动条距离 document.documentElement.scrollTop = curTop; document.body.scrollTop = curTop; &#125;, frequencytwo);&#125;); 本人才疏学浅，暂时只能展示所知显浅部分，有误或可改进之处请留言告知 ◕‿-]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
