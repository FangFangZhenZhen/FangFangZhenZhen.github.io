<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fang&#39;Blog</title>
  
  <subtitle>心有猛虎，细嗅蔷薇。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fanguvw.xyz/"/>
  <updated>2018-11-25T15:27:57.926Z</updated>
  <id>http://fanguvw.xyz/</id>
  
  <author>
    <name>Fang Zhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git总结</title>
    <link href="http://fanguvw.xyz/2018/11/25/Git%E6%80%BB%E7%BB%93/"/>
    <id>http://fanguvw.xyz/2018/11/25/Git总结/</id>
    <published>2018-11-25T15:00:07.000Z</published>
    <updated>2018-11-25T15:27:57.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><ul><li><p>index暂存(又名staging area–暂存区)</p><pre><code>暂存区是可以设置哪些变更要提交到版本库，哪些先不提交。临时存放的地方（staging area）。</code></pre></li><li><p>work area–工作区</p><pre><code>我们工作的区域空间</code></pre></li><li><p>local repository–本地仓库</p><pre><code>就是我们自己工作的电脑上保存版本数据的地方</code></pre></li><li><p>remote repository–远程仓库</p><pre><code>我们用Git进行操作，为了防止数据在自己电脑上丢失，比如错误删除，病毒攻击等原因造成了数据丢失，我们需要备份到远程的服务器上，这个服务器可以理解为远程仓库。</code></pre><h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h2></li></ul><ol><li>在用户目录下查看是否有.ssh目录若有则查看目录下是否有id_rsa（密钥）和id_rsa.pub（公钥）若有则不必再次生成直接使用</li><li>创建SSH Key：ssh-keygen -t rsa -C “<a href="mailto:851580041@qq.com" target="_blank" rel="noopener">851580041@qq.com</a>“</li><li>登录到代码托管平台(如github)打开账户设置中的SSHKey页面粘贴公钥</li><li>可添加多个key(只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了)<h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2> [workspace] -&gt; add -&gt; [local cache] -&gt; commit -&gt;[local repository] -&gt; push -&gt;[remote git repository]-&gt; clone -&gt; [git repository] checkout -&gt; [workspace]<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="本地初始化关联远程仓库"><a href="#本地初始化关联远程仓库" class="headerlink" title="本地初始化关联远程仓库"></a>本地初始化关联远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &apos;nick&apos;</span><br><span class="line">git config --global user.email &apos;851580041@qq.com&apos;</span><br><span class="line">git init gitlearn # 初始化项目</span><br><span class="line">git status # 查看状态</span><br><span class="line">git add 1.txt # 添加修改到本地缓存</span><br><span class="line">git add -A # 添加所有到本地缓存</span><br><span class="line">git commit -am &apos;1.txt&apos; # 添加提交到本地仓库</span><br><span class="line">git remote add origin https://github.com/csy512889371/gitlearn.git #添加远程仓库</span><br><span class="line">git remote #查看远程</span><br><span class="line">git push origin master -u</span><br></pre></td></tr></table></figure></li></ol><h3 id="克隆及更新"><a href="#克隆及更新" class="headerlink" title="克隆及更新"></a>克隆及更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/example/example.git #克隆项目</span><br><span class="line">git pull # 拉取代码</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="查看切换合并"><a href="#查看切换合并" class="headerlink" title="查看切换合并"></a>查看切换合并</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch [-v] # 查看当前分支</span><br><span class="line">git branch &lt;branch name&gt;# 基于当前分支新建分支</span><br><span class="line">git branch &lt;branch name&gt; &lt;commit id&gt;# 基于提交新建分支</span><br><span class="line">git checkout &lt;branch name&gt; #切换分支</span><br><span class="line">git merge &lt;merge target&gt; #用于合并指定分支到当前分支</span><br><span class="line"></span><br><span class="line"># 解决冲突，如果因冲突导致自动合并失败，此时status为mergeing状态</span><br><span class="line"># 需要手动修改后重新提交(commit)</span><br></pre></td></tr></table></figure><h4 id="创建删除分支"><a href="#创建删除分支" class="headerlink" title="创建删除分支"></a>创建删除分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -a</span><br><span class="line">git branch dev #创建分支dev</span><br><span class="line">git checkout dev #切换到dev分支</span><br><span class="line">git branch -d dev #删除分支</span><br><span class="line">git branch -D 强行删除未合并的分支</span><br><span class="line">git push origin dev -u #将分支提交到远程服务器</span><br><span class="line"></span><br><span class="line">git branch -av</span><br><span class="line">git branch -avv</span><br></pre></td></tr></table></figure><h4 id="提交代码冲突"><a href="#提交代码冲突" class="headerlink" title="提交代码冲突"></a>提交代码冲突</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line"># 本地合并</span><br><span class="line">git commit -am &apos;重新提交&apos;</span><br><span class="line">git push #提交到服务器</span><br></pre></td></tr></table></figure><h4 id="如果本地项目和远程都有项目且未做关联"><a href="#如果本地项目和远程都有项目且未做关联" class="headerlink" title="如果本地项目和远程都有项目且未做关联"></a>如果本地项目和远程都有项目且未做关联</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master master</span><br><span class="line">git pull --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h4 id="合并时强制禁用Fast-forward"><a href="#合并时强制禁用Fast-forward" class="headerlink" title="合并时强制禁用Fast forward"></a>合并时强制禁用Fast forward</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">首先，仍然创建并切换dev分支：</span><br><span class="line">git checkout -b dev</span><br><span class="line">修改readme.md文件，并提交一个新的commit：</span><br><span class="line">git add readme.md</span><br><span class="line">git commit -m &quot;add merge&quot;</span><br><span class="line">现在，我们切换回master：</span><br><span class="line">git checkout master</span><br><span class="line">准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：</span><br><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br><span class="line"></span><br><span class="line">git merge –no-ff 可以保存你之前的分支历史。能够更好的查看 merge历史，以及branch 状态。</span><br><span class="line">git merge 则不会显示 feature，只保留单条分支记录。</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0 #创建标签</span><br><span class="line">git tag #标签状态</span><br><span class="line">git push origin v1.0 -u #提交标签到远程仓库</span><br><span class="line"></span><br><span class="line">git tag -d v1.0 #删除标签</span><br><span class="line">git branch v1.0_dev v1.0 #基于标签创建分支</span><br><span class="line">git log #查看日志</span><br></pre></td></tr></table></figure><h4 id="标签管理（标签也是版本库的一个快照）"><a href="#标签管理（标签也是版本库的一个快照）" class="headerlink" title="标签管理（标签也是版本库的一个快照）"></a>标签管理（标签也是版本库的一个快照）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">命令git tag &lt;tagname&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id。</span><br><span class="line">git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息。</span><br><span class="line">还可以通过-s用私钥签名一个标签：</span><br><span class="line">git tag -s v0.5 -m &quot;signed version 0.2 released&quot; fec145a</span><br><span class="line">git tag可以查看所有标签。</span><br><span class="line">用命令git show &lt;tagname&gt;可以查看某个标签的详细信息。</span><br><span class="line">如果标签打错了，也可以删除：</span><br><span class="line">git tag -d v0.1</span><br><span class="line">因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</span><br><span class="line">如果要推送某个标签到远程，使用命令git push origin &lt;tagname&gt;：</span><br><span class="line">git push origin v1.0</span><br><span class="line">或者，一次性推送全部尚未推送到远程的本地标签：</span><br><span class="line">git push origin --tags</span><br><span class="line">如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</span><br><span class="line">git tag -d v0.9</span><br><span class="line">然后，从远程删除。删除命令也是push，但是格式如下：</span><br><span class="line">git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure><h3 id="项目目前状态"><a href="#项目目前状态" class="headerlink" title="项目目前状态"></a>项目目前状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git status//查看当前git版本库的状态</span><br></pre></td></tr></table></figure><h3 id="退回某个版本步骤"><a href="#退回某个版本步骤" class="headerlink" title="退回某个版本步骤"></a>退回某个版本步骤</h3><ol><li>git log查看所有历史版本</li><li>获取某个历史版本的id</li><li>git reset –hard id值</li><li>将修改提交到服务器（git push -f -u origin master）<h3 id="存储当前工作状态"><a href="#存储当前工作状态" class="headerlink" title="存储当前工作状态"></a>存储当前工作状态</h3></li><li>git stash （储藏当前状态之后，就能切换到别的分支）</li><li>git stash list (查看储藏状态的列表)</li><li>git stash apply 储藏的名字 （回到原来的分支之后，如何恢复到之前那种混乱的工作状态）<h3 id="实际开发中版本控制"><a href="#实际开发中版本控制" class="headerlink" title="实际开发中版本控制"></a>实际开发中版本控制</h3><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4></li><li>master与daily-test为只读分支</li><li>所有合并原则上不可逆</li><li>日常或紧急分支上线后就不可再使用（建议删除）</li><li>master与线上完全同步</li><li>daily-test版本必须大于等于master<br><img src="https://github.com/csyeva/eva/raw/master/img/github/bb1.png" alt="img1"><br><img src="https://raw.githubusercontent.com/csyeva/eva/master/img/github/bb2.png" alt="img1"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念理解&quot;&gt;&lt;a href=&quot;#概念理解&quot; class=&quot;headerlink&quot; title=&quot;概念理解&quot;&gt;&lt;/a&gt;概念理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;index暂存(又名staging area–暂存区)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;暂存区是可以设置哪些
      
    
    </summary>
    
      <category term="Git" scheme="http://fanguvw.xyz/categories/git/"/>
    
    
      <category term="Git" scheme="http://fanguvw.xyz/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>常用默认端口号</title>
    <link href="http://fanguvw.xyz/2018/11/25/%E5%B8%B8%E7%94%A8%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E5%8F%B7/"/>
    <id>http://fanguvw.xyz/2018/11/25/常用默认端口号/</id>
    <published>2018-11-25T14:08:43.000Z</published>
    <updated>2018-11-25T14:39:02.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理服务器常用端口"><a href="#代理服务器常用端口" class="headerlink" title="代理服务器常用端口"></a>代理服务器常用端口</h2><p>计算机端口号范围1~65535，端口不能重复</p><ul><li>HTTP协议代理服务器常用端口号：80/8080/3128/8081/9080</li><li>SOCKS代理协议服务器常用端口号：1080</li><li>FTP（文件传输）协议代理服务器常用端口号：21</li><li>Telnet（远程登录）协议代理服务器常用端口：23<h2 id="常用端口说明"><a href="#常用端口说明" class="headerlink" title="常用端口说明"></a>常用端口说明</h2></li><li><p>端口：21</p><pre><code>服务：FTP说明：FTP服务器所开放的端口，用于上传、下载。最常见的攻击者用于寻找打开anonymous的FTP服务器的方法。这些服务器带有可读写的目录。木马DolyTrojan、Fore、Invisible FTP、WebEx、WinCrash和BladeRunner所开放的端口。</code></pre></li><li><p>端口：22</p><pre><code>服务：SSH说明：PcAnywhere建立的TCP和这一端口的连接可能是为了寻找ssh。这一服务有许多弱点，如果配置成特定的模式，许多使用RSAREF库的版本就会有不少的漏洞存在。</code></pre></li><li><p>端口：23</p><pre><code>服务：Telnet说明：远程登录，入侵者在搜索远程登录UNIX的服务。大多数情况下扫描这一端口是为了找到机器运行的操作系统。还有使用其他技术，入侵者也会找到密码。木马TinyTelnetServer就开放这个端口。</code></pre></li><li><p>端口：25</p><pre><code>服务：SMTP说明：SMTP服务器所开放的端口，用于发送邮件。入侵者寻找SMTP服务器是为了传递他们的SPAM。入侵者的帐户被关闭，他们需要连接到高带宽的E-MAIL服务器上，将简单的信息传递到不同的地址。木马Antigen、EmailPassword Sender、Haebu Coceda、ShtrilitzStealth、WinPC、WinSpy都开放这个端口。</code></pre></li><li><p>端口：80</p><pre><code>服务：HTTP说明：用于网页浏览。木马Executor开放此端口。</code></pre></li><li><p>端口：443</p><pre><code>服务：Https说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。</code></pre></li><li><p>端口：1080</p><pre><code>服务：SOCKS说明：这一协议以通道方式穿过防火墙，允许防火墙后面的人通过一个IP地址访问INTERNET。理论上它应该只允许内部的通信向外到达INTERNET。但是由于错误的配置，它会允许位于防火墙外部的攻击穿过防火墙。WinGate常会发生这种错误，在加入IRC聊天室时常会看到这种情况。</code></pre></li><li><p>端口：3128</p><pre><code>服务：squid说明：这是squidHTTP代理服务器的默认端口。攻击者扫描这个端口是为了搜寻一个代理服务器而匿名访问Internet。也会看到搜索其他代理服务器的端口8000、8001、8080、8888。扫描这个端口的另一个原因是用户正在进入聊天室。其他用户也会检验这个端口以确定用户的机器是否支持代理。</code></pre></li><li><p>端口：443</p><pre><code>服务：Https说明：网页浏览端口，能提供加密和通过安全端口传输的另一种HTTP。</code></pre><h2 id="常见端口地点"><a href="#常见端口地点" class="headerlink" title="常见端口地点"></a>常见端口地点</h2></li><li>HTTP服务器，默认的端口号为80/tcp（木马Executor开放此端口）；</li><li>HTTPS（securely transferring web pages）服务器，默认的端口号为443/tcp 443/udp；</li><li>Telnet（不安全的文本传送），默认端口号为23/tcp（木马Tiny Telnet Server所开放的端口）；</li><li>FTP，默认的端口号为21/tcp（木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口）；</li><li>TFTP（Trivial File Transfer Protocol ），默认的端口号为69/udp；</li><li>SSH（安全登录）、SCP（文件传输）、端口重定向，默认的端口号为22/tcp；</li><li>SMTP Simple Mail Transfer Protocol (E-mail)，默认的端口号为25/tcp（木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口）；</li><li>POP3 Post Office Protocol (E-mail) ，默认的端口号为110/tcp；</li><li>WebLogic，默认的端口号为7001；</li><li>Webshpere应用程序，默认的端口号为9080；</li><li>webshpere管理工具，默认的端口号为9090；</li><li>JBOSS，默认的端口号为8080；</li><li>TOMCAT，默认的端口号为8080；</li><li>WIN2003远程登陆，默认的端口号为3389；</li><li>Symantec AV/Filter for MSE ,默认端口号为 8081；</li><li>Oracle 数据库，默认的端口号为1521；</li><li>ORACLE EMCTL，默认的端口号为1158；</li><li>Oracle XDB（ XML 数据库），默认的端口号为8080；</li><li>Oracle XDB FTP服务，默认的端口号为2100；</li><li>MS SQL*SERVER数据库server，默认的端口号为1433/tcp 1433/udp；</li><li>MS SQL*SERVER数据库monitor，默认的端口号为1434/tcp 1434/udp；</li><li>QQ，默认的端口号为1080/udp</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代理服务器常用端口&quot;&gt;&lt;a href=&quot;#代理服务器常用端口&quot; class=&quot;headerlink&quot; title=&quot;代理服务器常用端口&quot;&gt;&lt;/a&gt;代理服务器常用端口&lt;/h2&gt;&lt;p&gt;计算机端口号范围1~65535，端口不能重复&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP协议
      
    
    </summary>
    
      <category term="HTTP" scheme="http://fanguvw.xyz/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://fanguvw.xyz/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>IIS实现局域网联调</title>
    <link href="http://fanguvw.xyz/2018/11/25/IIS%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E8%81%94%E8%B0%83/"/>
    <id>http://fanguvw.xyz/2018/11/25/IIS实现局域网联调/</id>
    <published>2018-11-25T12:58:33.000Z</published>
    <updated>2018-11-25T13:56:56.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立局域网络"><a href="#建立局域网络" class="headerlink" title="建立局域网络"></a>建立局域网络</h2><pre><code>1.手机打开热点2.使你的笔记本连接至手机热点3.这时手机与笔记本就已经处于同一个局域网内了</code></pre><h2 id="基于IIS建立本地项目服务"><a href="#基于IIS建立本地项目服务" class="headerlink" title="基于IIS建立本地项目服务"></a>基于IIS建立本地项目服务</h2><pre><code>1.打开控制面板2.点击程序3.点击启用或关闭Windows功能4.选中Internet Information Services(IIS)--不必全选默认方块状态就可以了5.确定后会进行功能应用</code></pre><h2 id="IIS管理器基础设置"><a href="#IIS管理器基础设置" class="headerlink" title="IIS管理器基础设置"></a>IIS管理器基础设置</h2><pre><code>1.本地搜索并打开IIS管理器2.在右侧本地服务的网站目录上右键添加网站3.网站名称随意,物理路径选择你的本地项目地址4.IP地址为手机热点局域网地址(IP查看方式:运行CMD打开命令行-&gt;输入ipconfig-&gt;复制IPv4地址)5.端口号范围为1~65535(http默认80,https默认443)6.主机名为域名,可不填7.启动服务后即可在PC端与手机端输入ip地址与端口号同时浏览网站进行调试</code></pre><h2 id="基本流程图"><a href="#基本流程图" class="headerlink" title="基本流程图"></a>基本流程图</h2><p><img src="https://github.com/FangFangZhenZhen/FangFangZhenZhen.github.io/raw/SourceCode/source/images/IIS.png" alt="IIS流程图"></p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><ul><li>PC端<br><img src="https://github.com/FangFangZhenZhen/FangFangZhenZhen.github.io/raw/SourceCode/source/images/PC.png" alt="PC"></li><li>手机端<br><img src="https://github.com/FangFangZhenZhen/FangFangZhenZhen.github.io/raw/SourceCode/source/images/PHONE.jpg" alt="PHONE"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建立局域网络&quot;&gt;&lt;a href=&quot;#建立局域网络&quot; class=&quot;headerlink&quot; title=&quot;建立局域网络&quot;&gt;&lt;/a&gt;建立局域网络&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.手机打开热点
2.使你的笔记本连接至手机热点
3.这时手机与笔记本就已经处于同一个局域网
      
    
    </summary>
    
      <category term="IIS" scheme="http://fanguvw.xyz/categories/IIS/"/>
    
    
      <category term="IIS" scheme="http://fanguvw.xyz/tags/IIS/"/>
    
  </entry>
  
  <entry>
    <title>Call_Apply_Bind三者区别</title>
    <link href="http://fanguvw.xyz/2018/10/17/Call-Apply-Bind%E4%B8%89%E8%80%85%E5%8C%BA%E5%88%AB/"/>
    <id>http://fanguvw.xyz/2018/10/17/Call-Apply-Bind三者区别/</id>
    <published>2018-10-17T14:12:59.000Z</published>
    <updated>2018-10-17T14:19:54.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非严格模式下"><a href="#非严格模式下" class="headerlink" title="非严格模式下"></a>非严格模式下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// var obj = &#123;</span><br><span class="line">//     &apos;name&apos;: &apos;fang&apos;,</span><br><span class="line">//     &apos;sex&apos;: &apos;man&apos;</span><br><span class="line">// &#125;;</span><br><span class="line">// // console.log(obj[&apos;name&apos;],obj.sex); 获取对象属性值</span><br><span class="line">// var fn = function (num1, num2) &#123;</span><br><span class="line">//     console.log(num1 + num2);</span><br><span class="line">//     console.log(this);</span><br><span class="line">// &#125;</span><br><span class="line">// fn.call();//输出： NaN window对象 非严格模式下未指定this则默认指向window</span><br><span class="line">// fn.call(undefined); //输出： NaN window对象  </span><br><span class="line">// fn.call(null); //输出： NaN window对象</span><br><span class="line">// fn(100,200);  //输出 300  window对象 （fn为window调用）</span><br><span class="line">// fn.call(obj, 100, 200); //改变this指向，并传参</span><br><span class="line"></span><br><span class="line">// fn.apply(obj, [100, 200]); //IE6~8下不兼容 改变this指向，并以数组形式传参  与call只是传参形式不同  在严格与非严格模式下this指向输出相同</span><br><span class="line">// var tempFn = fn.bind(obj, 100, 200); //无输出  只是提前修改了this指向并传参  但并未执行  简称预处理！！！可将返回值预先传给变量 需要时再调用执行</span><br><span class="line">// tempFn();</span><br></pre></td></tr></table></figure><h2 id="严格模式下"><a href="#严格模式下" class="headerlink" title="严格模式下"></a>严格模式下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> // &apos;use strict&apos;</span><br><span class="line">// var obj = &#123;</span><br><span class="line">//     &apos;name&apos;: &apos;fang&apos;,</span><br><span class="line">//     &apos;sex&apos;: &apos;man&apos;</span><br><span class="line">// &#125;;</span><br><span class="line">// var fn = function (num1, num2) &#123;</span><br><span class="line">//     console.log(num1 + num2); </span><br><span class="line">//     console.log(this);</span><br><span class="line">// &#125;</span><br><span class="line">// fn.call(); //输出 NaN undefined</span><br><span class="line">// fn.call(undefined);//输出  NaN undefined</span><br><span class="line">// fn.call(null);//输出  NaN null</span><br><span class="line">// fn.call(100,200); //输出 NaN 100 this指向100  只传了一个参数所以为200+num2 为 NaN</span><br><span class="line">// 严格模式下call指向谁就输出谁 未输入则输出undefined</span><br><span class="line">// call与apply使用情况由项目决定</span><br></pre></td></tr></table></figure><h2 id="获取数组最大值与最小值思想"><a href="#获取数组最大值与最小值思想" class="headerlink" title="获取数组最大值与最小值思想"></a>获取数组最大值与最小值思想</h2><h3 id="思想一"><a href="#思想一" class="headerlink" title="思想一"></a>思想一</h3><p>排序法（arr.sort）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// var arr = [12, 25, 1, 22, 8, 6, 88, 7, 9, 44];</span><br><span class="line">// arr.sort(function (a, b) &#123;</span><br><span class="line">//     return a - b;</span><br><span class="line">// &#125;); //小到大排序 </span><br><span class="line">// var max = arr[arr.length - 1];</span><br><span class="line">// var min = arr[0];</span><br><span class="line">// console.log(min, max);</span><br></pre></td></tr></table></figure></p><h3 id="思想二"><a href="#思想二" class="headerlink" title="思想二"></a>思想二</h3><p>eval() 字符串拼接实现  Math.max() Math.min()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// var arr = [12, 25, 1, 22, 8, 6, 88, 7, 9, 44];</span><br><span class="line">//  var max=   Math.max(arr); //输出NaN  此方法需要一个一个写入值 </span><br><span class="line">// var max=Math.max(2,5,11,1,4); //输出：11</span><br><span class="line">// 所以需要将arr转为一个一个数传入此方法</span><br><span class="line">// var str = arr.toString(); // &apos;12, 25, 1, 22, 8, 6, 88, 7, 9, 44&apos;</span><br><span class="line">// // eval:此方法将会将字符串作为JS语句执行  可用于计算表达式类型字符串的值eval(&quot;1+2+4&quot;)===7</span><br><span class="line">// // var evalstr= eval(str); //输出44  失败  原因:当括号括号函数中传入多个需要执行的值,将只执行最后一个  并会改变this指向</span><br><span class="line">// // 尝试字符串拼接的思想  -&gt;成功</span><br><span class="line">// var max = eval(&apos;Math.max(&apos; + str + &apos;)&apos;); //eval(&apos;Math.max(12, 25, 1, 22, 8, 6, 88, 7, 9, 44)&apos;);</span><br><span class="line">// var min = eval(&apos;Math.min(&apos; + str + &apos;)&apos;); //eval(&apos;Math.min(12, 25, 1, 22, 8, 6, 88, 7, 9, 44)&apos;);</span><br><span class="line">// console.log(min, max);</span><br></pre></td></tr></table></figure></p><h3 id="思想三"><a href="#思想三" class="headerlink" title="思想三"></a>思想三</h3><p>假设法 假设一个为最大值或最小值 循环比较 替换值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// var arr = [12, 25, 1, 22, 8, 6, 88, 7, 9, 44];</span><br><span class="line">      // var min=arr[0],max=arr[0];</span><br><span class="line">      // for(var i=1;i&lt;arr.length;i++)&#123;</span><br><span class="line">      //     arr[i]&lt;min?min=arr[i]:null;</span><br><span class="line">      //     arr[i]&gt;max?max=arr[i]:null;</span><br><span class="line">      // &#125;</span><br><span class="line">      // console.log(min,max);</span><br></pre></td></tr></table></figure></p><h3 id="思想四"><a href="#思想四" class="headerlink" title="思想四"></a>思想四</h3><p>apply(null,arr)  Math.max() Math.min();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// var arr = [12, 25, 1, 22, 8, 6, 88, 7, 9, 44];</span><br><span class="line"> // var max = Math.max.apply(null, arr);</span><br><span class="line"> // var min = Math.min.apply(null, arr);</span><br><span class="line"> // console.log(max);</span><br><span class="line"> // console.log(min);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;非严格模式下&quot;&gt;&lt;a href=&quot;#非严格模式下&quot; class=&quot;headerlink&quot; title=&quot;非严格模式下&quot;&gt;&lt;/a&gt;非严格模式下&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Js" scheme="http://fanguvw.xyz/categories/Js/"/>
    
    
      <category term="Js" scheme="http://fanguvw.xyz/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>内置模块常用方法</title>
    <link href="http://fanguvw.xyz/2018/10/17/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://fanguvw.xyz/2018/10/17/内置模块常用方法/</id>
    <published>2018-10-17T13:59:13.000Z</published>
    <updated>2018-10-17T14:08:30.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SERVER"><a href="#SERVER" class="headerlink" title="SERVER"></a>SERVER</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  // 导入常用的三个内置模块</span><br><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">const url = require(&apos;url&apos;); //-&gt; URL模块中提供一个方法  url.parse() 用于解析url地址</span><br><span class="line"></span><br><span class="line">// 1.HTTP</span><br><span class="line">//-&gt;http.createServer:创建一个服务</span><br><span class="line">// -&gt;server.listen:为这个服务监听一个端口888  端口范围：0~65535</span><br><span class="line">var server = http.createServer(function (request, response) &#123;</span><br><span class="line">    // 当客户端向当前服务（端口为888）发送一个请求，并且当前服务已经成功接收到这个请求后执行这个回调函数</span><br><span class="line">    //    发送请求方式： 1.http://localhost:端口号/ 2. http://本机IP地址：端口号/</span><br><span class="line">    // request（请求）:存放的是所有客户端的请求信息，包含客户端通过问号传参的方式传递的数据</span><br><span class="line">    // response（响应）：提供了向客户端返回内容与数据的方法</span><br><span class="line">    // console.log(request.url);</span><br><span class="line">    //  request.url:存放的是客户端请求的文件资源的目录和名称已经传递给服务器的数据</span><br><span class="line">    // 客户端请求的完整地址为：http://localhost:888/index.html?name=fang&amp;age=22 通过request.url获取到的为 /index.html?name=fang&amp;age=22</span><br><span class="line">    var urlObj = url.parse(request.url, true);</span><br><span class="line">    var pathname = urlObj.pathname; //请求资源路径+名称</span><br><span class="line">    console.log(pathname);</span><br><span class="line">    var query = urlObj.query; //客户端传递来的数据（键值对形式）</span><br><span class="line"></span><br><span class="line">    if (pathname === &apos;/server1.html&apos;) &#123;</span><br><span class="line">        // 根据请求的URL地址（主要是地址中的pathname）获取到对应资源的源代码</span><br><span class="line">        //fs.readFileSync([path+name],[encode]):同步读取指定文件中的内容（同步读取：文件内容读取完成才执行后续操作）</span><br><span class="line">        var con = fs.readFileSync(&apos;./server1.html&apos;, &apos;utf8&apos;);</span><br><span class="line">        response.write(con); //向客户端返回内容</span><br><span class="line">        response.end(); //告诉服务器响应结束（必须写）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">server.listen(666, function () &#123;</span><br><span class="line">    // 当服务创建成功，且端口号也监听成功后执行 </span><br><span class="line">    console.log(&apos;server iscreate success! listening on 666 port! &apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> const url = require(&apos;url&apos;);</span><br><span class="line">var u = &apos;http://localhost:888/index.html?name=fang&amp;age=22#fang&apos;;</span><br><span class="line">// console.log(url.parse(u));//解析url地址 输出一个对象</span><br><span class="line">/*</span><br><span class="line"> Url &#123;</span><br><span class="line">  protocol: &apos;http:&apos;,  //传输协议</span><br><span class="line">  slashes: true,        </span><br><span class="line">  auth: null,</span><br><span class="line">  host: &apos;localhost:888&apos;,  //域名+端口号</span><br><span class="line">  port: &apos;888&apos;,        //端口号</span><br><span class="line">  hostname: &apos;localhost&apos;,    //域名</span><br><span class="line">  hash: #fang,           //hash值</span><br><span class="line">  search: &apos;?name=fang&amp;age=22&apos;,  //问号加传递来的数据</span><br><span class="line">  query: &apos;name=fang&amp;age=22&apos;,    //传递来的数据</span><br><span class="line">  pathname: &apos;/index.html&apos;,      //请求文件的路径及名称</span><br><span class="line">  path: &apos;/index.html?name=fang&amp;age=22&apos;,  //路径+名称+数据</span><br><span class="line">  href: &apos;http://localhost:888/index.html?name=fang&amp;age=22&apos; //完整请求地址</span><br><span class="line"> &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">console.log(url.parse(u, true));//解析url地址 输出一个对象 加true后query部分变成键值对形式 所以平时这样使用更易操作</span><br><span class="line">/*</span><br><span class="line">Url &#123;</span><br><span class="line">    。。。</span><br><span class="line">    query: &#123; name: &apos;fang&apos;, age: &apos;22&apos; &#125;,  </span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="QUERYSTRING"><a href="#QUERYSTRING" class="headerlink" title="QUERYSTRING"></a>QUERYSTRING</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> const querystring = require(&apos;querystring&apos;);</span><br><span class="line">var data = &#123;</span><br><span class="line">    protocol: &apos;https:&apos;,</span><br><span class="line">    slashes: true,</span><br><span class="line">    auth: null,</span><br><span class="line">    host: &apos;www.ibm.com:443&apos;,</span><br><span class="line">    port: &apos;443&apos;,</span><br><span class="line">    hostname: &apos;www.ibm.com&apos;,</span><br><span class="line">    hash: &apos;#name&apos;,</span><br><span class="line">    search: &apos;?name=fang&amp;sex=man&apos;,</span><br><span class="line">    query: &apos;name=fang&amp;sex=man&apos;,</span><br><span class="line">    pathname: &apos;/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html&apos;,</span><br><span class="line">    path: &apos;/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html?name=fang&amp;sex=man&apos;,</span><br><span class="line">    href: &apos;https://www.ibm.com:443/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html?name=fang&amp;sex=man#name&apos;</span><br><span class="line">&#125;;</span><br><span class="line">var q = querystring.stringify(data);  //将url对象转为url字符串拼接格式  输出内容需要进行地址解码</span><br><span class="line">/*</span><br><span class="line"> protocol=https%3A&amp;slashes=true&amp;auth=&amp;host=www.ibm.com%3A443&amp;port=443&amp;hostname=www.ibm.com&amp;hash=%23name&amp;search=%3Fname%3Dfang%26sex%3Dman&amp;query=name%3Dfang%26sex%3Dman&amp;pathname=%2Fdeveloperworks%2Fcn%2Fweb%2Fwa-use-javascript-closures-efficiently%2Findex.html&amp;path=%2Fdeveloperworks%2Fcn%2Fweb%2Fwa-use-javascript-closures-efficiently%2Findex.html%3Fname%3Dfang%26sex%3Dman&amp;href=https%3A%2F%2Fwww.ibm.com%3A443%2Fdeveloperworks%2Fcn%2Fweb%2Fwa-use-javascript-closures-efficiently%2Findex.html%3Fname%3Dfang%26sex%3Dman%23name</span><br><span class="line"> */</span><br><span class="line">// q = querystring.unescape(q);  //对url字符串地址进行解码   编码为：querystring.escape();  </span><br><span class="line">/*</span><br><span class="line">protocol=https:&amp;slashes=true&amp;auth=&amp;host=www.ibm.com:443&amp;port=443&amp;hostname=www.ibm.com&amp;hash=#name&amp;search=?name=fang&amp;sex=man&amp;query=name=fang&amp;sex=man&amp;pathname=/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html&amp;path=/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html?name=fang&amp;sex=man&amp;href=https://www.ibm.com:443/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html?name=fang&amp;sex=man#name</span><br><span class="line">*/</span><br><span class="line">q = querystring.parse(q);  //将完整地址转为对象格式</span><br><span class="line">/**</span><br><span class="line"> &#123; protocol: &apos;https:&apos;,</span><br><span class="line">  slashes: &apos;true&apos;,</span><br><span class="line">  auth: &apos;&apos;,</span><br><span class="line">  host: &apos;www.ibm.com:443&apos;,</span><br><span class="line">  port: &apos;443&apos;,</span><br><span class="line">  hostname: &apos;www.ibm.com&apos;,</span><br><span class="line">  hash: &apos;#name&apos;,</span><br><span class="line">  search: &apos;?name=fang&amp;sex=man&apos;,</span><br><span class="line">  query: &apos;name=fang&amp;sex=man&apos;,</span><br><span class="line">  pathname: &apos;/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html&apos;,</span><br><span class="line">  path: &apos;/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html?name=fang&amp;sex=man&apos;,</span><br><span class="line">  href: &apos;https://www.ibm.com:443/developerworks/cn/web/wa-use-javascript-closures-efficiently/index.html?name=fang&amp;sex=man#name&apos; &#125;</span><br><span class="line"> */</span><br><span class="line">console.log(q);</span><br></pre></td></tr></table></figure><h2 id="APPENDFILE"><a href="#APPENDFILE" class="headerlink" title="APPENDFILE"></a>APPENDFILE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> var fs = require(&apos;fs&apos;);</span><br><span class="line">var data = `this is append data  from `+__filename;</span><br><span class="line">fs.appendFile(&apos;./test1/new1.js&apos;, data, (err) =&gt; &#123; </span><br><span class="line">    if (err) throw err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="RENAME"><a href="#RENAME" class="headerlink" title="RENAME"></a>RENAME</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> const fs = require(&apos;fs&apos;);</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">files = fs.readdirSync(&apos;./test1&apos;);</span><br><span class="line">// console.log(files);</span><br><span class="line">for (var i = 0; i &lt;files.length; i++) &#123; </span><br><span class="line">    var oldpath = path.join(__dirname, &apos;test1&apos;, files[i]);</span><br><span class="line">    var newpath = path.join(__dirname, &apos;test1&apos;, files[i].replace(/test/, &apos;new&apos;));</span><br><span class="line">    console.log(newpath);</span><br><span class="line">    fs.rename(oldpath, newpath, (err) =&gt; &#123; </span><br><span class="line">        if (err) throw err;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CHMODSYNC"><a href="#CHMODSYNC" class="headerlink" title="CHMODSYNC"></a>CHMODSYNC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> const fs = require(&apos;fs&apos;);</span><br><span class="line">fs.chmodSync(&apos;./test1/new1.js&apos;, 0o444);</span><br><span class="line"></span><br><span class="line">// NumberDescription</span><br><span class="line">// 7read, write, and execute</span><br><span class="line">// 6read and write</span><br><span class="line">// 5read and execute</span><br><span class="line">// 4read only</span><br><span class="line">// 3write and execute</span><br><span class="line">// 2write only</span><br><span class="line">// 1execute only</span><br><span class="line">// 0no permission</span><br></pre></td></tr></table></figure><h2 id="ACCESS"><a href="#ACCESS" class="headerlink" title="ACCESS"></a>ACCESS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> const fs = require(&apos;fs&apos;);</span><br><span class="line">// fs.access(&apos;./test1/new1.js&apos;,fs.constants.F_OK, (err) =&gt; &#123; </span><br><span class="line">//     console.log(`$&#123;&apos;./test1/new1.js&apos;&#125;$&#123;err ? &apos;不存在&apos; :&apos;存在&apos;&#125;`);</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">// fs.access(&apos;./test1/new1.js&apos;, fs.constants.W_OK, (err) =&gt; &#123; </span><br><span class="line">//     console.log(`$&#123;&apos;./test1/new1.js&apos;&#125;$&#123;err?&apos;不可写&apos;:&apos;可写&apos;&#125;`);</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">// fs.access(&apos;./test1/new1.js&apos;, fs.constants.R_OK, (err) =&gt; &#123; </span><br><span class="line">//     console.log(`$&#123;&apos;./test1/new1.js&apos;&#125;$&#123;err?&apos;不可读&apos;:&apos;可读&apos;&#125;`);</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">// fs.access(&apos;./test1/new1.js&apos;, fs.constants.E_OK, (err) =&gt; &#123; </span><br><span class="line">//     console.log(`$&#123;&apos;./test1/new1.js&apos;&#125;$&#123;err?&apos;不可执行&apos;:&apos;可执行&apos;&#125;`);</span><br><span class="line">// &#125;);</span><br><span class="line">fs.access(&apos;./test1/new1.js&apos;, fs.constants.F_OK, (err) =&gt; &#123;</span><br><span class="line">    err ? console.log(&apos;文件不存在&apos;) : fs.access(&apos;./test1/new1.js&apos;, fs.constants.W_OK, (err) =&gt; &#123;</span><br><span class="line">        err ? fs.chmodSync(&apos;./test1/new1.js&apos;, 0o765, (err) =&gt; &#123;</span><br><span class="line">                if (err) throw err;</span><br><span class="line"></span><br><span class="line">                // 备注部分执行不到</span><br><span class="line">                // fs.appendFile(&apos;./test1/new1.js&apos;, &apos; 源文件不可写，以修改权限，写入成功···&apos;, (err) =&gt; &#123;</span><br><span class="line">                //     if (err) throw err;</span><br><span class="line">                // &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;) :</span><br><span class="line">            fs.appendFile(&apos;./test1/new1.js&apos;, &apos; 源文件可写，写入成功···&apos;, (err) =&gt; &#123;</span><br><span class="line">                if (err) throw err;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> const crypto = require(&apos;crypto&apos;);</span><br><span class="line"></span><br><span class="line">const secret = &apos;abcdefg&apos;;</span><br><span class="line">const hash = crypto.createHmac(&apos;sha256&apos;, secret)</span><br><span class="line">                   .update(&apos;I love cupcakes&apos;)</span><br><span class="line">                   .digest(&apos;hex&apos;);</span><br><span class="line">console.log(hash);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SERVER&quot;&gt;&lt;a href=&quot;#SERVER&quot; class=&quot;headerlink&quot; title=&quot;SERVER&quot;&gt;&lt;/a&gt;SERVER&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Server" scheme="http://fanguvw.xyz/categories/Server/"/>
    
      <category term="Node" scheme="http://fanguvw.xyz/categories/Server/Node/"/>
    
    
      <category term="Server" scheme="http://fanguvw.xyz/tags/Server/"/>
    
      <category term="Node" scheme="http://fanguvw.xyz/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>静态资源文件请求处理</title>
    <link href="http://fanguvw.xyz/2018/10/17/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/"/>
    <id>http://fanguvw.xyz/2018/10/17/静态资源文件请求处理/</id>
    <published>2018-10-17T13:52:45.000Z</published>
    <updated>2018-10-17T13:59:59.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导入内置模块"><a href="#导入内置模块" class="headerlink" title="导入内置模块"></a>导入内置模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;),</span><br><span class="line">url = require(&apos;url&apos;),</span><br><span class="line">fs = require(&apos;fs&apos;);</span><br></pre></td></tr></table></figure><h2 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">var server1 = http.createServer(function (req, res) &#123;</span><br><span class="line">    //解析客户端请求地址中的文件目录名称以及传递给当前服务器的数据</span><br><span class="line">    var urlObj = url.parse(req.url, true),</span><br><span class="line">        pathname = urlObj[&quot;pathname&quot;], //请求的路径名称</span><br><span class="line">        query = urlObj[&quot;query&quot;]; //传递来数据的键值对形式</span><br><span class="line"></span><br><span class="line">    //处理静态文件资源的请求（HTML/CCS/JS/...） =&gt; &quot;前端路由&quot; =&gt; （判断不同请求响应不同信息）</span><br><span class="line">    var reg = /\.(HTML|JS|CSS|JSON|TXT|ICO)/i;</span><br><span class="line">    if (reg.exec(pathname)) &#123;</span><br><span class="line">        //获取请求文件的后缀</span><br><span class="line">        var suffix = reg.exec(pathname)[1].toUpperCase();</span><br><span class="line">        // console.log(suffix);</span><br><span class="line">        //根据请求文件的后缀名获取到当前文件的MIME类型   浏览器会按照代码的MIME类型进行渲染</span><br><span class="line">        // MIME类型：HTML -&gt; &quot;text/html&quot;  css-&gt;&quot;text/css&quot;  TXT-&gt;&quot;text/palin&quot; 。。。</span><br><span class="line">        var suffixMIME = &quot;text/plain&quot;; //设置默认MIME类型</span><br><span class="line">        switch (suffix) &#123;</span><br><span class="line">            case &quot;HTML&quot;:</span><br><span class="line">                suffixMIME = &quot;text/html&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;CSS&quot;:</span><br><span class="line">                suffixMIME = &quot;text/css&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;JS&quot;:</span><br><span class="line">                suffixMIME = &quot;text/javascript&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;JSON&quot;:</span><br><span class="line">                suffixMIME = &quot;application/json&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;ICO&quot;:</span><br><span class="line">                suffixMIME = &quot;application/octet-stream&quot;;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // if (pathname === &quot;/index.html&quot;) &#123; </span><br><span class="line">        //     var con = fs.readFileSync(&apos;./index.html&apos;, &apos;utf-8&apos;);</span><br><span class="line">        //     res.end(con);</span><br><span class="line">        // &#125;</span><br><span class="line">        // if (pathname === &quot;/css/index.css&quot;) &#123; </span><br><span class="line">        //     con = fs.readFileSync(&apos;./css/index.css&apos;, &quot;utf-8&quot;);</span><br><span class="line">        //     res.end(con);</span><br><span class="line">        // &#125; </span><br><span class="line">        // if (pathname===&quot;/js/index.js&quot;) &#123; </span><br><span class="line">        //     con = fs.readFileSync(&apos;./js/index.js&apos;, &apos;utf-8&apos;);</span><br><span class="line">        //     res.end(con);</span><br><span class="line">        // &#125;</span><br><span class="line">        // 如果请求的资源不存在，不写try catch 会使服务停止运行，当加上后会捕获错误信息，即使请求资源不存在不会报错也不会终止服务</span><br><span class="line">        try &#123;</span><br><span class="line">            //以上三个判断可简写为以下语句</span><br><span class="line">            // 按照指定目录读取文件中的内容或者代码（字符串格式）</span><br><span class="line">            var con = fs.readFileSync(&apos;.&apos; + pathname, &apos;utf-8&apos;);</span><br><span class="line">            // 重写响应头信息：告诉客户端浏览器返回的是什么MIME类型,并指定返回内容格式为UTF-8编码格式</span><br><span class="line">            res.writeHead(200, &#123;&apos;content-type&apos;:suffixMIME+&apos;charset=utf-8&apos;&#125;);</span><br><span class="line">            // 服务端向客户端返回内容（字符串格式）</span><br><span class="line">            res.end(con);</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            res.writeHead(404, &#123; &apos;content-type&apos;: &apos;text/plain;charset=utf-8;&apos; &#125;);</span><br><span class="line">            res.end(&apos;request file is not found!&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="为当前服务配置端口并监听"><a href="#为当前服务配置端口并监听" class="headerlink" title="为当前服务配置端口并监听"></a>为当前服务配置端口并监听</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server1.listen(5555, function () &#123;</span><br><span class="line">    console.log(&quot;server is success,listening on 5555 port!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导入内置模块&quot;&gt;&lt;a href=&quot;#导入内置模块&quot; class=&quot;headerlink&quot; title=&quot;导入内置模块&quot;&gt;&lt;/a&gt;导入内置模块&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Server" scheme="http://fanguvw.xyz/categories/Server/"/>
    
      <category term="Node" scheme="http://fanguvw.xyz/categories/Server/Node/"/>
    
    
      <category term="Server" scheme="http://fanguvw.xyz/tags/Server/"/>
    
      <category term="Node" scheme="http://fanguvw.xyz/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>数据库注册用户功能实现</title>
    <link href="http://fanguvw.xyz/2018/10/10/%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>http://fanguvw.xyz/2018/10/10/实现注册功能/</id>
    <published>2018-10-10T14:17:33.000Z</published>
    <updated>2018-10-10T14:58:55.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库注册功能实现分析"><a href="#数据库注册功能实现分析" class="headerlink" title="数据库注册功能实现分析"></a>数据库注册功能实现分析</h2><p>最近模仿百度云写了一套页面,先简单记录一下注册功能的实现</p><pre><code>0.检测数据库中用户名是否已存在并将结果显示到前端（通过AJAX的GET请求,连接到PHP查询用户名页,PHP查询页内容为连接数据库并检索数据库中前端传递来的用户名是否已存在,将结果以JSON字符串对象形式返回到前端）1.提交HTML表单数据到后台PHP获取2.PHP获取前端表单内name属性值3.PHP连接数据库检测用户名是否已存在4.不存在则向数据库插入新用户信息</code></pre><p>数据库设计图<br><img src="https://github.com/FangFangZhenZhen/FangFangZhenZhen.github.io/raw/SourceCode/source/images/database.JPG" alt="数据库"><br>效果图如下<br><img src="https://github.com/FangFangZhenZhen/FangFangZhenZhen.github.io/raw/SourceCode/source/images/reg.JPG" alt="注册"></p><h2 id="注册功能表单HTML代码"><a href="#注册功能表单HTML代码" class="headerlink" title="注册功能表单HTML代码"></a>注册功能表单HTML代码</h2><p><a href="https://github.com/FangFangZhenZhen/Example/blob/master/reg.html" target="_blank" rel="noopener">HTML完整代码</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;_san_7&quot; class=&quot;san-form&quot;  method=&quot;POST&quot;&gt;</span><br><span class="line">                               &lt;!-- 用户名 --&gt;</span><br><span class="line">                               &lt;div id=&quot;_san_9&quot; class=&quot;san-form-item san-form-item-userName&quot;&gt;</span><br><span class="line">                                   &lt;div id=&quot;_san_11&quot; class=&quot;san-form-item-content&quot;&gt;</span><br><span class="line">                                       &lt;input type=&quot;text&quot; id=&quot;_san_13&quot; name=&quot;uname&quot; placeholder=&quot;用户名&quot;&gt;</span><br><span class="line">                                       &lt;label id=&quot;_san_81&quot; class=&quot;invalid-label&quot;&gt;&lt;/label&gt;</span><br><span class="line">                                   &lt;/div&gt;</span><br><span class="line">                               &lt;/div&gt;</span><br><span class="line">                               &lt;!-- 密码 --&gt;</span><br><span class="line">                               &lt;div id=&quot;_san_15&quot; class=&quot;san-form-item san-form-item-password&quot;&gt;</span><br><span class="line">                                   &lt;div id=&quot;_san_17&quot; class=&quot;san-form-item-content&quot;&gt;</span><br><span class="line">                                       &lt;input type=&quot;password&quot; id=&quot;_san_19&quot; name=&quot;upwd&quot; placeholder=&quot;密码&quot;&gt;</span><br><span class="line">                                       &lt;label id=&quot;_san_57&quot; class=&quot;invalid-label&quot;&gt;&lt;/label&gt;</span><br><span class="line">                                   &lt;/div&gt;</span><br><span class="line">                               &lt;/div&gt;</span><br><span class="line">                               &lt;!-- 确认密码 --&gt;</span><br><span class="line">                               &lt;div id=&quot;_san_21&quot; class=&quot;san-form-item san-form-item-confirmPassword&quot;&gt;</span><br><span class="line">                                   &lt;div id=&quot;_san_23&quot; class=&quot;san-form-item-content&quot;&gt;</span><br><span class="line">                                       &lt;input type=&quot;password&quot; id=&quot;_san_25&quot; name=&quot;cpwd&quot; placeholder=&quot;确认密码&quot;&gt;</span><br><span class="line">                                       &lt;label id=&quot;_san_59&quot; class=&quot;invalid-label&quot;&gt;&lt;/label&gt;</span><br><span class="line">                                   &lt;/div&gt;</span><br><span class="line">                               &lt;/div&gt;</span><br><span class="line">                               &lt;!-- 注册 --&gt;</span><br><span class="line">                               &lt;div id=&quot;_san_41&quot; class=&quot;san-form-item&quot;&gt;</span><br><span class="line">                                   &lt;div id=&quot;_san_43&quot; class=&quot;san-form-item-content&quot;&gt;</span><br><span class="line">                                       &lt;button id=&quot;_san_45&quot; type=&quot;submit&quot; class=&quot;submit&quot;&gt;同意条款并注册&lt;/button&gt;</span><br><span class="line">                                   &lt;/div&gt;</span><br><span class="line">                               &lt;/div&gt;</span><br><span class="line">                           &lt;/form&gt;</span><br></pre></td></tr></table></figure></p><h2 id="注册功能表单JS代码"><a href="#注册功能表单JS代码" class="headerlink" title="注册功能表单JS代码"></a>注册功能表单JS代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">// 用户名正则验证</span><br><span class="line">var userName = $(&apos;#_san_13&apos;);</span><br><span class="line">var form = $(&apos;#_san_7&apos;);</span><br><span class="line">var submit = $(&apos;#_san_45&apos;);</span><br><span class="line">var userReg = /^[A-Za-z\d_-]&#123;6,32&#125;$/; //用户名正则</span><br><span class="line">var userError = $(&apos;#_san_81&apos;); //用户名错误文本</span><br><span class="line">userName.on(&quot;keyup&quot;, function () &#123;</span><br><span class="line">    if (userReg.test(userName.val())) &#123;</span><br><span class="line">        userName.css(&quot;border-color&quot;, &quot;#ccc&quot;);</span><br><span class="line">        userError.text(&quot;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    if (!userReg.test(userName.val())) &#123;</span><br><span class="line">        userName.css(&quot;outline&quot;, &quot;none&quot;); //去除聚焦时的边框</span><br><span class="line">        userName.css(&quot;border-color&quot;, &quot;red&quot;); //设置错误时边框</span><br><span class="line">        userError.text(&quot;用户名长度必须是6-32个字符之间&quot;) //错误内容</span><br><span class="line">    &#125;</span><br><span class="line">    if (userName.val() == &quot;&quot;) &#123;</span><br><span class="line">        userName.css(&quot;outline&quot;, &quot;none&quot;);</span><br><span class="line">        userError.text(&quot;用户名必填&quot;)</span><br><span class="line">        userName.css(&quot;border-color&quot;, &quot;red&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 用户名数据库验证</span><br><span class="line">//1.完成用户名称的重复性验证（异步，检查数据库中是否已存在当前用户名）</span><br><span class="line">//异步请求数据，因为还要输入下面的数据，不能跳转到php页面去验证</span><br><span class="line">userName.on(&quot;blur&quot;, function () &#123;</span><br><span class="line">    //1.创建XHR对象 创建异步对象</span><br><span class="line">    var xhr = null;</span><br><span class="line">    if (window.XMLHttpRequest) &#123;</span><br><span class="line">        xhr = new XMLHttpRequest(); //标准创建</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //IE6及以下的创建方式</span><br><span class="line">        xhr = new ActiveXObject(&quot;Microsoft.XMLHttp&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //2.创建请求</span><br><span class="line">    var uname = userName.val();</span><br><span class="line">    //获取输入框里的值，把用户名传到后端，再查询</span><br><span class="line">    var url = &quot;../php/check-name.php?uname=&quot; + uname;</span><br><span class="line">    xhr.open(&quot;get&quot;, url, true);</span><br><span class="line">    //查询用户名称，用get方法就行，去数据库查询，看用户名是否已经存在</span><br><span class="line">    //查询用get就行，向服务器提交数据时再用post</span><br><span class="line"></span><br><span class="line">    //3.设置回调函数，监听状态</span><br><span class="line">    //参数true，异步</span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = function () &#123;</span><br><span class="line">        if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">            //判断状态，xhr请求状态为4，表示接收响应数据成功；当status的值是200的时候，表示服务器已经正确的处理请求以及给出响应</span><br><span class="line">            var resultStr = xhr.responseText;</span><br><span class="line">          var resultJson  =JSON.parse(resultStr);</span><br><span class="line">            if (resultJson==&apos;true&apos;) &#123;</span><br><span class="line">                // userError.text(&quot;用户名可用&quot;);   </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                form.removeAttr(&quot;action&quot;);</span><br><span class="line">                userName.css(&quot;outline&quot;, &quot;none&quot;); //去除聚焦时的边框</span><br><span class="line">                userName.css(&quot;border-color&quot;, &quot;red&quot;); //设置错误时边框</span><br><span class="line">                userError.text(&quot;用户名已存在&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            // console.log(resultJson==&apos;false&apos;);</span><br><span class="line">            //提示内容</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //4.发送请求</span><br><span class="line">    xhr.send(null);</span><br><span class="line">    //get请求，参数写null</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 密码正则验证</span><br><span class="line">var pwd = $(&apos;#_san_19&apos;);</span><br><span class="line">var pwdReg = /^.*(?=.&#123;6,32&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z]).*$/; //密码正则(6-32位且至少1个大写字母，1个小写字母，1个数字)</span><br><span class="line">var pwdError = $(&apos;#_san_57&apos;); //密码错误文本</span><br><span class="line">pwd.on(&quot;keyup&quot;, function () &#123;</span><br><span class="line">    if (pwdReg.test(pwd.val())) &#123; //格式正确</span><br><span class="line">        pwd.css(&quot;border-color&quot;, &quot;#ccc&quot;);</span><br><span class="line">        pwdError.text(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (pwd.val().length &lt;= 6) &#123; //格式错误</span><br><span class="line">        pwd.css(&quot;outline&quot;, &quot;none&quot;); //去除聚焦时的边框</span><br><span class="line">        pwd.css(&quot;border-color&quot;, &quot;red&quot;); //设置错误时边框</span><br><span class="line">        pwdError.text(&quot;密码长度必须是6-32个字符之间&quot;) //错误内容</span><br><span class="line">    &#125;</span><br><span class="line">    if (pwd.val().length &gt; 6 &amp;&amp; (!pwdReg.test(pwd.val()))) &#123;</span><br><span class="line">        pwd.css(&quot;outline&quot;, &quot;none&quot;); //去除聚焦时的边框</span><br><span class="line">        pwd.css(&quot;border-color&quot;, &quot;red&quot;); //设置错误时边框</span><br><span class="line">        pwdError.text(&quot;密码必须包含数字、大小写英文字母&quot;) //错误内容</span><br><span class="line">    &#125;</span><br><span class="line">    if (pwd.val() == &quot;&quot;) &#123; //密码为空</span><br><span class="line">        pwd.css(&quot;outline&quot;, &quot;none&quot;);</span><br><span class="line">        pwdError.text(&quot;密码必填&quot;);</span><br><span class="line">        pwd.css(&quot;border-color&quot;, &quot;red&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 确认密码验证</span><br><span class="line">var pwdCheck = $(&apos;#_san_25&apos;);</span><br><span class="line">var pwdCheckReg = /^.*(?=.&#123;6,32&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z]).*$/; //密码正则(6-32位且至少1个大写字母，1个小写字母，1个数字)</span><br><span class="line">var pwdCheckError = $(&apos;#_san_59&apos;); //确认密码错误文本</span><br><span class="line">pwdCheck.on(&quot;keyup&quot;, function () &#123;</span><br><span class="line">    if (pwdCheckReg.test(pwdCheck.val()) &amp;&amp; pwdCheck.val() === pwd.val()) &#123; //确认密码正确</span><br><span class="line">        pwdCheck.css(&quot;border-color&quot;, &quot;#ccc&quot;);</span><br><span class="line">        pwdCheckError.text(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (pwdCheck.val().length &lt;= 6) &#123; //格式错误</span><br><span class="line">        pwdCheck.css(&quot;outline&quot;, &quot;none&quot;); //去除聚焦时的边框</span><br><span class="line">        pwdCheck.css(&quot;border-color&quot;, &quot;red&quot;); //设置错误时边框</span><br><span class="line">        pwdCheckError.text(&quot;确认密码长度必须是6-32个字符之间&quot;) //错误内容</span><br><span class="line">    &#125;</span><br><span class="line">    if (pwdCheck.val().length &gt; 6 &amp;&amp; (!pwdCheckReg.test(pwdCheck.val()))) &#123;</span><br><span class="line">        pwdCheck.css(&quot;outline&quot;, &quot;none&quot;); //去除聚焦时的边框</span><br><span class="line">        pwdCheck.css(&quot;border-color&quot;, &quot;red&quot;); //设置错误时边框</span><br><span class="line">        pwdCheckError.text(&quot;确认密码必须包含数字、大小写英文字母&quot;) //错误内容</span><br><span class="line">    &#125;</span><br><span class="line">    if (pwdCheckReg.test(pwdCheck.val()) &amp;&amp; pwdCheck.val() != pwd.val()) &#123; //确认密码正确</span><br><span class="line">        pwdCheck.css(&quot;outline&quot;, &quot;none&quot;); //去除聚焦时的边框</span><br><span class="line">        pwdCheck.css(&quot;border-color&quot;, &quot;red&quot;); //设置错误时边框</span><br><span class="line">        pwdCheckError.text(&quot;两次输入的内容不一致&quot;) //错误内容</span><br><span class="line">    &#125;</span><br><span class="line">    if (pwdCheck.val() == &quot;&quot;) &#123; //密码为空</span><br><span class="line">        pwdCheck.css(&quot;outline&quot;, &quot;none&quot;);</span><br><span class="line">        pwdCheckError.text(&quot;确认密码必填&quot;);</span><br><span class="line">        pwdCheck.css(&quot;border-color&quot;, &quot;red&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//判断是否可注册</span><br><span class="line">submit.on(&apos;mouseover&apos;, function () &#123; </span><br><span class="line">    // 满足所有规则时向后台提交数据</span><br><span class="line">    if (userReg.test(userName.val()) == true&amp;&amp;pwdReg.test(pwd.val())==true&amp;&amp;pwdCheckReg.test(pwdCheck.val())==true &amp;&amp; (pwdCheck.val() === pwd.val())==true) &#123;</span><br><span class="line">        form.attr(&quot;action&quot;, &quot;../php/reg.php&quot;);</span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        form.removeAttr(&quot;action&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="PHP检测数据库用户名代码"><a href="#PHP检测数据库用户名代码" class="headerlink" title="PHP检测数据库用户名代码"></a>PHP检测数据库用户名代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// 1.连接数据库</span><br><span class="line">    $conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;baidu&quot;);</span><br><span class="line">    if (!$conn)&#123;</span><br><span class="line">        echo &quot;Error: Unable to connect to MySQL.&quot; . PHP_EOL;</span><br><span class="line">        echo &quot;Debugging errno: &quot; . mysqli_connect_errno() . PHP_EOL;</span><br><span class="line">        echo &quot;Debugging error: &quot; . mysqli_connect_error() . PHP_EOL;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">    mysqli_set_charset($conn, &quot;utf8&quot;);</span><br><span class="line">// 2.接收前端传过来的uname</span><br><span class="line">    $uname=$_REQUEST[&quot;uname&quot;];</span><br><span class="line">  </span><br><span class="line">// 3.拼接sql，并查询uname是否存在</span><br><span class="line">    $sql=&quot; SELECT uname FROM register WHERE uname=&apos;$uname&apos;&quot;;</span><br><span class="line">    $result=mysqli_query($conn,$sql);</span><br><span class="line">// 4.根据查询的结果输出相应</span><br><span class="line">$row=mysqli_fetch_row($result);</span><br><span class="line">  //抓取一条数据，即当前uname对应的数据</span><br><span class="line"></span><br><span class="line">    $raw_success =&apos;true&apos;;</span><br><span class="line">$raw_fail =&apos;false&apos;;</span><br><span class="line"></span><br><span class="line">    $res_success = json_encode($raw_success);</span><br><span class="line">    $res_fail = json_encode($raw_fail);</span><br><span class="line"></span><br><span class="line">  if($row==null)&#123;</span><br><span class="line">  //如果$row为空，即数据库中没有相同的用户名存在 </span><br><span class="line">  echo $res_success;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    echo $res_fail;</span><br><span class="line">  &#125;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="PHP检测是否可注册代码"><a href="#PHP检测是否可注册代码" class="headerlink" title="PHP检测是否可注册代码"></a>PHP检测是否可注册代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 1.获取请求提交的数据</span><br><span class="line">    $uname=$_REQUEST[&quot;uname&quot;];</span><br><span class="line">    //uname值就是前端页面中name属性的值</span><br><span class="line">    $upwd=$_REQUEST[&quot;upwd&quot;];</span><br><span class="line">    //确认密码不用获取，获取一个密码就行</span><br><span class="line"></span><br><span class="line">// 2.连接到数据库</span><br><span class="line">$conn = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;baidu&quot;);</span><br><span class="line">if (!$conn)&#123;</span><br><span class="line">    echo &quot;Error: Unable to connect to MySQL.&quot; . PHP_EOL;</span><br><span class="line">    echo &quot;Debugging errno: &quot; . mysqli_connect_errno() . PHP_EOL;</span><br><span class="line">    echo &quot;Debugging error: &quot; . mysqli_connect_error() . PHP_EOL;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">// 设置编码，防止中文乱码</span><br><span class="line">mysqli_set_charset($conn, &quot;utf8&quot;);</span><br><span class="line"></span><br><span class="line">// 3.写sql语句并执行</span><br><span class="line">$sql=&quot;INSERT INTO register (uname, upwd) VALUES (&apos;$uname&apos;,&apos;$upwd&apos;)&quot;;</span><br><span class="line">//字段值 外面用双引号，里面用单引号</span><br><span class="line">$result=mysqli_query($conn,$sql);</span><br><span class="line">//执行sql语句</span><br><span class="line"></span><br><span class="line">// 4.根据执行结果给出响应</span><br><span class="line">    if($result==true)&#123; //函数返回值</span><br><span class="line">        echo &quot;&lt;span  style=&quot;font-size:40px;color:red;&quot;&gt;注册成功&lt;/span&gt;&quot;;</span><br><span class="line">        echo &apos;&lt;a href=&quot;../html/login.html&quot; style=&quot;font-size:40px;color:red;&quot;&gt;立即登录&lt;/a&gt;&apos;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &quot;&lt;span  style=&quot;font-size:40px;color:red;&quot;&gt;注册失败&lt;/span&gt;&quot;;</span><br><span class="line">        echo &apos;&lt;a href=&quot;../html/reg.html&quot; style=&quot;font-size:40px;color:red;&quot;&gt;重新注册&lt;/a&gt;&apos;;</span><br><span class="line">    &#125;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库注册功能实现分析&quot;&gt;&lt;a href=&quot;#数据库注册功能实现分析&quot; class=&quot;headerlink&quot; title=&quot;数据库注册功能实现分析&quot;&gt;&lt;/a&gt;数据库注册功能实现分析&lt;/h2&gt;&lt;p&gt;最近模仿百度云写了一套页面,先简单记录一下注册功能的实现&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="AJAX" scheme="http://fanguvw.xyz/categories/AJAX/"/>
    
      <category term="数据库" scheme="http://fanguvw.xyz/categories/AJAX/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="AJAX" scheme="http://fanguvw.xyz/tags/AJAX/"/>
    
      <category term="数据库" scheme="http://fanguvw.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>同步（sync）与异步(async)编程</title>
    <link href="http://fanguvw.xyz/2018/10/09/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>http://fanguvw.xyz/2018/10/09/同步与异步编程/</id>
    <published>2018-10-09T14:00:30.000Z</published>
    <updated>2018-10-09T14:14:23.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><pre><code>同步：在进程中任务未结束时需等待结束才能执行下一个任务 异步：在进程中任务未结束但在等待的过程中可先去执行下一个任务js是属于单线程，所以我们最好采用异步编程单线程：所有的任务由一个线程来完成  多线程：多个任务可分配给不同的线程来完成</code></pre><h2 id="js中的异步编程："><a href="#js中的异步编程：" class="headerlink" title="js中的异步编程："></a>js中的异步编程：</h2><pre><code>1.定时器属于异步编程（到时间点后才开始执行，当时间设置为0也不会立即执行=&gt; 浏览器有延迟时间：谷歌：5~6ms IE：10~13ms）2.事件绑定属于异步编程（事件触发时才执行）3.回调函数也可理解为异步编程4.在AJAX中可以使用异步编程</code></pre><h2 id="同步异步案例理解"><a href="#同步异步案例理解" class="headerlink" title="同步异步案例理解"></a>同步异步案例理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//案例一</span><br><span class="line">var count = 0;</span><br><span class="line">window.setTimeout(function () &#123;</span><br><span class="line">    count++;</span><br><span class="line">    console.log(count);//后输出=&gt;1  1000ms后</span><br><span class="line">&#125;, 1000);</span><br><span class="line">console.log(count); //先输出=&gt;0</span><br><span class="line">//案例二</span><br><span class="line">var count = 0;</span><br><span class="line">window.setTimeout(function () &#123;</span><br><span class="line">    count++;</span><br><span class="line">    console.log(count);//后输出=&gt;1  不会立马执行，需要等待一段时间 谷歌：5~6ms IE：10~13ms </span><br><span class="line">&#125;,0);</span><br><span class="line">console.log(count); //先输出=&gt;0</span><br><span class="line">//案例三</span><br><span class="line">   var count = 0;</span><br><span class="line">window.setTimeout(function () &#123;</span><br><span class="line">    count++;</span><br><span class="line">    console.log(count); //不输出：因为线程一直被死循环占用，定时器需要一直等待着</span><br><span class="line">&#125;,1000);</span><br><span class="line">console.log(count); //先输出=&gt;0</span><br><span class="line">while(1)&#123;</span><br><span class="line">    //死循环</span><br><span class="line">&#125;</span><br><span class="line">//案例四</span><br><span class="line">window.setTimeout(function () &#123;</span><br><span class="line">    console.log(&apos;a&apos;); //再输出a</span><br><span class="line">&#125;,10);</span><br><span class="line">window.setTimeout(function () &#123;</span><br><span class="line">    console.log(&apos;b&apos;);  //先输出b  因为在等待队列中是按时间排序的 时间短的先执行 </span><br><span class="line">&#125;,6);</span><br><span class="line">var i=0;</span><br><span class="line">while(i&lt;1000000000)&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AJAX中的同步与异步编程"><a href="#AJAX中的同步与异步编程" class="headerlink" title="AJAX中的同步与异步编程"></a>AJAX中的同步与异步编程</h2><pre><code>AJAX中的同步：当AJAX任务开始时（xhr.send），一直需要到 READY STATE===4的时候任务才结束，才可以执行下一个任务AJAX中的异步：当AJAX任务开始时（xhr.send），不需要等待READY STATE===4,期间可以执行其他任务，当READY STATE===时，再做相关操作</code></pre><h3 id="AJAX中的三部曲"><a href="#AJAX中的三部曲" class="headerlink" title="AJAX中的三部曲"></a>AJAX中的三部曲</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var xhr=new XMLHttpRequest();</span><br><span class="line">xhr.open(&quot;GET&quot;,&quot;/list&quot;,true);</span><br><span class="line">/*</span><br><span class="line">        xhr.onreadystatechange=function()&#123;</span><br><span class="line">            if(xhr.readystate===4&amp;&amp;xhr.status===200)&#123;</span><br><span class="line">                ......</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line">xhr.send(null);//只有send之后AJAX任务（向服务器发送请求）才开始</span><br></pre></td></tr></table></figure><h2 id="AJAX中案例理解"><a href="#AJAX中案例理解" class="headerlink" title="AJAX中案例理解"></a>AJAX中案例理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//案例一</span><br><span class="line">var xhr=new XMLHttpRequest(); //readyState===0</span><br><span class="line">xhr.open(&quot;GET&quot;,&quot;./a.json&quot;,true); //readyState===1</span><br><span class="line">xhr.onreadystatechange=function()&#123;  //绑定事件</span><br><span class="line">    console.log(xhr.readyState); //输出： 2 3 4</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(null); //任务开始 1-&gt;2-&gt;3-&gt;4 </span><br><span class="line"></span><br><span class="line">//案例二</span><br><span class="line">var xhr=new XMLHttpRequest(); //readyState===0</span><br><span class="line">xhr.open(&quot;GET&quot;,&quot;./a.json&quot;,false); //readyState===1</span><br><span class="line">xhr.onreadystatechange=function()&#123;  //绑定事件</span><br><span class="line">    console.log(xhr.readyState); //输出：4 （同步） 当请求结束 readyState==4时才输出  ajax本身是异步方法 （xhr保存开始时值1，当任务结束时值为4 状态码由1-&gt;4 输出4）</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(null); //任务开始 1-&gt;2-&gt;3-&gt;4 </span><br><span class="line"></span><br><span class="line">//案例三</span><br><span class="line">var xhr=new XMLHttpRequest(); //readyState===0</span><br><span class="line">xhr.open(&quot;GET&quot;,&quot;./a.json&quot;,true); //readyState===1</span><br><span class="line">xhr.send(null); //任务开始 1-&gt;2-&gt;3-&gt;4 </span><br><span class="line">xhr.onreadystatechange=function()&#123;  //绑定事件</span><br><span class="line">    console.log(xhr.readyState); //输出：2 3 4 （异步-&gt;不需要等待状态码为4 -&gt;直接执行以下任务）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//案例四</span><br><span class="line">var xhr=new XMLHttpRequest(); //readyState===0</span><br><span class="line">xhr.open(&quot;GET&quot;,&quot;./a.json&quot;,false); //readyState===1</span><br><span class="line">xhr.send(null); //任务开始 1-&gt;2-&gt;3-&gt;4 </span><br><span class="line">xhr.onreadystatechange=function()&#123;  //绑定事件</span><br><span class="line">    console.log(xhr.readyState); // 无输出 （同步-&gt;状态码已为4时才添加事件-&gt;状态码不再改变触发事件-&gt;无输出）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取服务器时间"><a href="#获取服务器时间" class="headerlink" title="获取服务器时间"></a>获取服务器时间</h2><pre><code>状态码（readyState）为2时就需进行的操作（需异步）  =&gt;如获取响应头中的服务器时间（Date）=&gt; 可应用于电商网站倒计时抢购（若用客户端时间则用户可更改客户端时间） 虽状态码为4时可获取服务器响应头中的时间，但状态码从2-&gt;3-&gt;4占大量时间 当状态码为2时获取可节省时间 减小时间误差 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest(); //readyState===0</span><br><span class="line">xhr.open(&quot;HEAD&quot;, &quot;./a.json&quot;, true); //readyState===1 </span><br><span class="line">xhr.setRequestHeader(&quot;H51806&quot;,&quot;fang&quot;); //客户端设置请求头信息到a.json上-&gt;服务器端获取 （需写在open方法后）</span><br><span class="line">xhr.timeout=&quot;1000&quot;;//设置AJAX请求的超时时间（若为同步编程，请求时间超过设置时间时放弃请求，执行下列任务）</span><br><span class="line">/*</span><br><span class="line">    常用HTTP方法：</span><br><span class="line">        GET:一般用于从服务器获取数据（给服务器数据少，获取数据多，此方法最常用）-&gt;问号传参</span><br><span class="line">        POST:一般用于推送数据给服务器（给服务器多，获取少）  -&gt;请求主体传参</span><br><span class="line">        PUT:一般用于给服务器增加资源文件（上传图片功能）</span><br><span class="line">        DELETE:一般用于从服务器删除资源文件</span><br><span class="line">        HEAD:一般用于获取服务器响应头信息</span><br><span class="line">    这些请求方式不管是哪一种都可以向服务器获得或者传递数据，且从本质意义上无区别，只是行业内被开发者人约定俗成了各自不同的用处，并非标准。</span><br><span class="line">*/</span><br><span class="line">xhr.onreadystatechange = function () &#123; //绑定事件</span><br><span class="line">        if (xhr.readyState === 2) &#123;</span><br><span class="line">            // xhr.getResponseHeader=&gt;客户端获取服务器的响应头信息 </span><br><span class="line">            var time = xhr.getResponseHeader(&quot;Date&quot;);  </span><br><span class="line">            console.log(time); //输出的为格林尼治时间（GMT）</span><br><span class="line">            console.log(new Date(time)); //输出为中国标准时间（GMT+0800）</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同步与异步&quot;&gt;&lt;a href=&quot;#同步与异步&quot; class=&quot;headerlink&quot; title=&quot;同步与异步&quot;&gt;&lt;/a&gt;同步与异步&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;同步：在进程中任务未结束时需等待结束才能执行下一个任务 
异步：在进程中任务未结束但在等待的过程中可
      
    
    </summary>
    
      <category term="AJAX" scheme="http://fanguvw.xyz/categories/AJAX/"/>
    
    
      <category term="AJAX" scheme="http://fanguvw.xyz/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>AJAX中的HTTP请求方式</title>
    <link href="http://fanguvw.xyz/2018/10/07/HTTP-METHOD/"/>
    <id>http://fanguvw.xyz/2018/10/07/HTTP-METHOD/</id>
    <published>2018-10-07T06:24:25.000Z</published>
    <updated>2018-10-07T06:55:32.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-METHOD"><a href="#HTTP-METHOD" class="headerlink" title="HTTP METHOD"></a>HTTP METHOD</h2><pre><code>HTTP常用的几种请求方式：1.GET2.POST3.PUT4.DELETE5.HEAD</code></pre><p>这些请求方式不管是哪一种都可以向服务器请求获取数据或者传递数据，从本质上无区别，只是在行业内被开发人员约定俗成各自不同的用处，并非是一种标准。</p><h2 id="方法分析"><a href="#方法分析" class="headerlink" title="方法分析"></a>方法分析</h2><pre><code>1.GET:一般用于从服务器获取数据（给服务器数据少，获取数据多，此方法最为常用）2.POST:一般用于推送数据给服务器（给服务器多，获取数据少）3.PUT：一般用于向服务器传递资源文件（上传图片功能）4.DELETE:一般用于删除服务器资源文件5.HEAD:一般用于获取服务器响应头信息</code></pre><h2 id="GET-PK-POST"><a href="#GET-PK-POST" class="headerlink" title="GET PK POST"></a>GET PK POST</h2><p>传递方式：</p><pre><code>GET:向服务器传递内容一般通过&quot;URL问号传参方式&quot;xhr.open(&quot;GET&quot;,&quot;/getlist?a=2&amp;num=4&quot;,true);POST:向服务器传递内容一般通过&quot;请求主体的方式&quot;xhr.open(&quot;POST&quot;,&quot;/postlist&quot;,true);xhr.send(&apos;{&quot;name&quot;:&quot;fang&quot;,&quot;age&quot;:&quot;22&quot;}&apos;); //传递的为JSON对象格式的字符串</code></pre><p>大小问题：</p><pre><code>GET请求传递给服务器的内容存在大小限制，而POST理论上无限制（实际一般最大2MB）原因：GET是通过URL传参形式，而每个浏览器对URL长度有限制，谷歌8KB，火狐7KB，IE2KB,所以当兼容IE情况下最大上传2KB大小内容。</code></pre><p>缓存问题：</p><pre><code>GET请求会出现缓存 =&gt; 因为请求地址与传参相同（不一定是304），POST请求无缓存在项目中我们的GET请求一般不允许出现缓存 =&gt; “清除缓存” =&gt; 改变URL =&gt; 在URL末尾追加一个随机数 =&gt; xhr.open(&quot;GET&quot;,&quot;/getlist?a=2&amp;num=5&amp;_=&quot;+Math.random(),true);</code></pre><p>安全问题：</p><pre><code>一般来说GET不安全（URL传参）,而POST相对安全实际当攻击者想攻击时都不安全</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP-METHOD&quot;&gt;&lt;a href=&quot;#HTTP-METHOD&quot; class=&quot;headerlink&quot; title=&quot;HTTP METHOD&quot;&gt;&lt;/a&gt;HTTP METHOD&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;HTTP常用的几种请求方式：
1.GET
2.POS
      
    
    </summary>
    
      <category term="AJAX" scheme="http://fanguvw.xyz/categories/AJAX/"/>
    
    
      <category term="AJAX" scheme="http://fanguvw.xyz/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式（发布/订阅模式）</title>
    <link href="http://fanguvw.xyz/2018/10/02/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fanguvw.xyz/2018/10/02/观察者模式/</id>
    <published>2018-10-02T13:27:52.000Z</published>
    <updated>2018-10-02T13:49:56.303Z</updated>
    
    <content type="html"><![CDATA[<pre><code>观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。</code></pre><p>说的简单些，就是在数据发生改变时，对应的处理函数自动执行。维基的定义中涉及到了主动发出通知，按照这种方式，在angularJS中的事件广播更是中规中矩，但是其缺点是代码的可维护性较差。那么如果不进行主动通知，而是在进行对象属性值设置时，调用相关的处理函数，也可达到同等效果。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// 页面加载时自动执行</span><br><span class="line">       var Observer = (function() &#123;</span><br><span class="line">           // 为了防止消息被外部修改，将消息变量设为私有变量</span><br><span class="line">           var _message = &#123;&#125;;</span><br><span class="line">           return &#123;</span><br><span class="line">               // 注册信息接口</span><br><span class="line">               regist: function(type, fn) &#123;</span><br><span class="line">                   // 判断消息类型是否存在</span><br><span class="line">                   if (typeof _message[type] === &apos;undefined&apos;) &#123;</span><br><span class="line">                       // 将动作推送到消息队列中执行</span><br><span class="line">                       _message[type] = [fn];</span><br><span class="line">                   &#125; else &#123;</span><br><span class="line">                       // 将动作方法推入到对应类型的队列中</span><br><span class="line">                       _message[type].push(fn);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               // 发布消息接口</span><br><span class="line">               fire: function(type, args) &#123;</span><br><span class="line">                   //如果该消息没有被注册，直接结束</span><br><span class="line">                   if (!_message[type]) return;</span><br><span class="line">                   var events = &#123;</span><br><span class="line">                       type: type, //消息的类型</span><br><span class="line">                       args: args || &#123;&#125; //消息所携带的数据</span><br><span class="line">                   &#125;</span><br><span class="line">                   i = 0, //消息循环变量</span><br><span class="line">                       len = _message[type].length; //消息动作的长度</span><br><span class="line">                   for (; i &lt; len; i++) &#123;</span><br><span class="line">                       //依次执行注册消息所对应的动作序列</span><br><span class="line">                       _message[type][i].call(this, events);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               // 移除信息接口</span><br><span class="line">               remove: function(type, fn) &#123;</span><br><span class="line">                   // 如果消息队列存在</span><br><span class="line">                   if (_message[type] instanceof Array) &#123;</span><br><span class="line">                       //从最后一个消息动作开始遍历</span><br><span class="line">                       var i = _message[type].length - 1;</span><br><span class="line">                       for (; i &gt;= 0; i--) &#123;</span><br><span class="line">                           _message[type][i] === fn &amp;&amp; _message[type].splice(i, 1);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)();</span><br><span class="line"></span><br><span class="line">       //订阅消息</span><br><span class="line"></span><br><span class="line">       Observer.regist(&apos;news&apos;, function(e) &#123;</span><br><span class="line">           console.log(e.type, e.args.msg);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       Observer.regist(&apos;weather&apos;, function(e) &#123;</span><br><span class="line">           console.log(e.args.title);</span><br><span class="line">           console.log(e.args.msg);</span><br><span class="line">       &#125;);</span><br><span class="line">       Observer.regist(&apos;weather&apos;, function(e) &#123;</span><br><span class="line">           console.log(e.args.title);</span><br><span class="line">           console.log(e.args.msg);</span><br><span class="line">       &#125;);</span><br><span class="line">       //发布消息</span><br><span class="line">       Observer.fire(&apos;news&apos;, &#123;</span><br><span class="line">           msg: &apos;新闻主体内容&apos;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       Observer.fire(&apos;weather&apos;, &#123;</span><br><span class="line">           title: &apos;杭州天气&apos;,</span><br><span class="line">           msg: &apos;晴转多云 21-36°C&apos;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       Observer.fire(&apos;weather&apos;, &#123;</span><br><span class="line">           title: &apos;上海天气&apos;,</span><br><span class="line">           msg: &apos;晴转多云 22-36°C&apos;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实时事件处理系统。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说的简单些，就是在数
      
    
    </summary>
    
      <category term="设计模式" scheme="http://fanguvw.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://fanguvw.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>AJAX兼容与惰性思想</title>
    <link href="http://fanguvw.xyz/2018/09/28/AJAX/"/>
    <id>http://fanguvw.xyz/2018/09/28/AJAX/</id>
    <published>2018-09-28T13:50:21.000Z</published>
    <updated>2018-09-28T14:21:32.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS编程技巧-惰性思想"><a href="#JS编程技巧-惰性思想" class="headerlink" title="JS编程技巧:惰性思想"></a>JS编程技巧:惰性思想</h2><pre><code>所谓的惰性思想可以简单地理解为:只执行一次可以搞定的事，绝不执行多次。</code></pre><h3 id="惰性思想代码块"><a href="#惰性思想代码块" class="headerlink" title="惰性思想代码块:"></a>惰性思想代码块:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var utils=(function()&#123;</span><br><span class="line">    var flag=&quot;getComputedStyle&quot; in window; //若返回true则为标准浏览器，false为IE8及以下浏览器 </span><br><span class="line">    function getCss()&#123;</span><br><span class="line">        if(flag)&#123;  //因为以上已判断此浏览器结果并保存,直接使用flag而不需要用window.getComputedStyle判断</span><br><span class="line">            </span><br><span class="line">        &#125;else&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return&#123;</span><br><span class="line">        getCss:getCss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">utils.getCss(); </span><br><span class="line">utils.getCss();</span><br><span class="line">utils.getCss();</span><br></pre></td></tr></table></figure><h2 id="惰性思想创建AJAX对象"><a href="#惰性思想创建AJAX对象" class="headerlink" title="惰性思想创建AJAX对象"></a>惰性思想创建AJAX对象</h2><pre><code>利用函数创建且兼容所有浏览器</code></pre><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var createXHR = function () &#123;</span><br><span class="line">    var xhr = null,</span><br><span class="line">        flag=false, //判断浏览器是否支持AJAX</span><br><span class="line">        // 定义一个数组用于存放创建AJAX对象的各种方法</span><br><span class="line">        arr = [</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new XMLHttpRequest(); //只兼容IE7及以上 </span><br><span class="line">            &#125;,</span><br><span class="line">            // 以下三种方法兼容低版本浏览器</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new ActiveXObject(&quot;Msxml3.XMLHTTP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line">    //  遍历这个数组中的小方法,当可用时即可取用</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        var curFn = arr[i]; //获取当前遍历到的小方法</span><br><span class="line">        try &#123;</span><br><span class="line">            // 本次循环获取的方法执行没有报错：说明此方法可用，下次直接执行此小方法即可=&gt;将createXHR重写为此小方法</span><br><span class="line">            xhr = curFn();</span><br><span class="line">            createXHR = curFn;    </span><br><span class="line">            flag = true; //浏览器可兼容AJAX则为true;</span><br><span class="line">            break; //结束循环</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            //本次获取的方法执行报错则继续循环遍历下一个方法</span><br><span class="line">        &#125;</span><br><span class="line">        if (!flag) &#123; </span><br><span class="line">            throw new Error(&quot;please updata your brower&quot;); //浏览器不支持AJAX时抛出错误</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return xhr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS编程技巧-惰性思想&quot;&gt;&lt;a href=&quot;#JS编程技巧-惰性思想&quot; class=&quot;headerlink&quot; title=&quot;JS编程技巧:惰性思想&quot;&gt;&lt;/a&gt;JS编程技巧:惰性思想&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;所谓的惰性思想可以简单地理解为:只执行一次可以搞定的
      
    
    </summary>
    
      <category term="Ajax" scheme="http://fanguvw.xyz/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://fanguvw.xyz/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>旋转的八卦图</title>
    <link href="http://fanguvw.xyz/2018/09/17/%E6%97%8B%E8%BD%AC%E7%9A%84%E5%85%AB%E5%8D%A6%E5%9B%BE/"/>
    <id>http://fanguvw.xyz/2018/09/17/旋转的八卦图/</id>
    <published>2018-09-17T13:31:30.000Z</published>
    <updated>2018-09-18T07:00:14.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用JS或CSS3结合Canvas实现八卦图旋转"><a href="#利用JS或CSS3结合Canvas实现八卦图旋转" class="headerlink" title="利用JS或CSS3结合Canvas实现八卦图旋转"></a>利用JS或CSS3结合Canvas实现八卦图旋转</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用JS或CSS3结合Canvas实现八卦图旋转&quot;&gt;&lt;a href=&quot;#利用JS或CSS3结合Canvas实现八卦图旋转&quot; class=&quot;headerlink&quot; title=&quot;利用JS或CSS3结合Canvas实现八卦图旋转&quot;&gt;&lt;/a&gt;利用JS或CSS3结合Can
      
    
    </summary>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/categories/canvas/"/>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/canvas/jacascript/"/>
    
      <category term="Css" scheme="http://fanguvw.xyz/categories/canvas/jacascript/css/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/tags/canvas/"/>
    
      <category term="Css" scheme="http://fanguvw.xyz/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>原生JS实现文字跑马灯</title>
    <link href="http://fanguvw.xyz/2018/09/17/%E8%B7%91%E9%A9%AC%E7%81%AF/"/>
    <id>http://fanguvw.xyz/2018/09/17/跑马灯/</id>
    <published>2018-09-17T13:26:12.000Z</published>
    <updated>2018-10-02T13:54:32.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跑马灯思想"><a href="#跑马灯思想" class="headerlink" title="跑马灯思想"></a>跑马灯思想</h2><pre><code>所谓的跑马灯即类似于循环播放的通知告示等等效果。主要利用元素嵌套产生的横向滚动条来控制循环滚动。</code></pre><p><img src="https://github.com/FangFangZhenZhen/FangFangZhenZhen.github.io/raw/SourceCode/source/images/run.gif" alt="Gif run"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;跑马灯&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #box&#123;</span><br><span class="line">            background: pink;</span><br><span class="line">            border: 1px dashed black;</span><br><span class="line">            width: 608px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">        #begin&#123;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        #end&#123;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">        &#125;</span><br><span class="line">       #movebox&#123;</span><br><span class="line">           overflow: hidden;</span><br><span class="line">       &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box&quot;&gt; </span><br><span class="line">        &lt;div id=&quot;movebox&quot;&gt;</span><br><span class="line">                &lt;div id=&quot;begin&quot;&gt; </span><br><span class="line">                        &lt;span style=&quot;color:red;&quot;&gt;感言: &lt;/span&gt;梯子的梯阶从来不是用来搁脚的，它只是让人们的脚放上一段时间，以便让别一只脚能够再往上登。 山路曲折盘旋，但毕竟朝着顶峰延伸。 只有登上山顶，才能看到那边的风光。</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=&quot;end&quot;&gt; </span><br><span class="line">                    &lt;span style=&quot;color:red;&quot;&gt;感言: &lt;/span&gt;梯子的梯阶从来不是用来搁脚的，它只是让人们的脚放上一段时间，以便让别一只脚能够再往上登。 山路曲折盘旋，但毕竟朝着顶峰延伸。 只有登上山顶，才能看到那边的风光。</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var movebox=document.getElementById(&apos;movebox&apos;);</span><br><span class="line">    var begin=document.getElementById(&apos;begin&apos;);</span><br><span class="line">    var beginWidth=window.getComputedStyle(begin,null).width; //获取元素宽度 自带单位（px）</span><br><span class="line">    // console.log(beginWidth); //string类型 </span><br><span class="line">    var beginw=beginWidth.replace(/px/,&quot;&quot;); //去除px单位</span><br><span class="line">    // console.log(beginw); </span><br><span class="line">    var timer=window.setInterval(function()&#123;</span><br><span class="line">        var curLeft=movebox.scrollLeft; //获取当前加之前的scrollleft值</span><br><span class="line">        movebox.scrollLeft=curLeft+1;  //每隔10毫秒就使文字盒子水平滚动条在当前值上加1</span><br><span class="line">        var newLeft=movebox.scrollLeft; //获取当前加之后的left值</span><br><span class="line">console.log(newLeft); </span><br><span class="line">        // 当scrollLeft值大于等于第一个div宽度时重置位置</span><br><span class="line">        if(newLeft&gt;=beginw)&#123;   </span><br><span class="line">            movebox.scrollLeft=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,10)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跑马灯思想&quot;&gt;&lt;a href=&quot;#跑马灯思想&quot; class=&quot;headerlink&quot; title=&quot;跑马灯思想&quot;&gt;&lt;/a&gt;跑马灯思想&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;所谓的跑马灯即类似于循环播放的通知告示等等效果。
主要利用元素嵌套产生的横向滚动条来控制循环滚动。

      
    
    </summary>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/jacascript/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
  </entry>
  
  <entry>
    <title>贪吃蛇了解一下</title>
    <link href="http://fanguvw.xyz/2018/09/15/%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    <id>http://fanguvw.xyz/2018/09/15/贪吃蛇/</id>
    <published>2018-09-15T11:24:59.000Z</published>
    <updated>2018-09-17T13:28:04.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用Canvas与JavaScript实现贪吃蛇"><a href="#利用Canvas与JavaScript实现贪吃蛇" class="headerlink" title="利用Canvas与JavaScript实现贪吃蛇"></a>利用Canvas与JavaScript实现贪吃蛇</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用Canvas与JavaScript实现贪吃蛇&quot;&gt;&lt;a href=&quot;#利用Canvas与JavaScript实现贪吃蛇&quot; class=&quot;headerlink&quot; title=&quot;利用Canvas与JavaScript实现贪吃蛇&quot;&gt;&lt;/a&gt;利用Canvas与JavaS
      
    
    </summary>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/categories/canvas/"/>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/canvas/jacascript/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>原生JS实现回到页面顶部</title>
    <link href="http://fanguvw.xyz/2018/09/14/%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/"/>
    <id>http://fanguvw.xyz/2018/09/14/原生JS实现回到顶部/</id>
    <published>2018-09-14T12:47:53.846Z</published>
    <updated>2018-10-02T13:40:04.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><pre><code>1.右下角按钮回到顶部(点击后按钮消失，随即页面滑动到顶部;页面下拉距离超过一屏幕显示回到顶部按钮，反之按钮消失)2.列表hover时显示随机颜色(利用时间委托机制)3.点击左侧列表，页面滑动到对应模块(通过获取所点击列表的ID值滑动到对应CLASS值相同的模块)</code></pre><p><a href="https://github.com/FangFangZhenZhen/Example/blob/master/toTop.html" target="_blank" rel="noopener">点击查看源代码</a></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="回到顶部按钮"><a href="#回到顶部按钮" class="headerlink" title="回到顶部按钮"></a>回到顶部按钮</h3><pre><code>1.获取当前scrollTop距离（var distance=document.documentElement.scrollTop||document.body.scrollTop）2.总时间(var timer=500;单位：ms)  总共需要运动500ms3.频率( var frequency=10;单位：ms) 每10ms运动一次4.步长(var step=distance/timer*frequency)  每毫秒运动距离*频率=每一次运动所需步长</code></pre><h4 id="回到顶部代码"><a href="#回到顶部代码" class="headerlink" title="回到顶部代码"></a>回到顶部代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">var span = document.getElementsByTagName(&apos;span&apos;)[0];</span><br><span class="line">var i = document.getElementsByTagName(&apos;i&apos;)[0];</span><br><span class="line">var timer = 1000; //总时间</span><br><span class="line">var frequency = 5; //频率</span><br><span class="line">window.onscroll = show;</span><br><span class="line">function show() &#123;</span><br><span class="line">    var dis = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">    var windis = window.screen.height; //屏幕分辨率高度</span><br><span class="line">    // console.log(windis); </span><br><span class="line">    //当前滚动条距离大于一个屏幕高度时显示回到顶部按钮</span><br><span class="line">    if (dis &gt;= windis) &#123;</span><br><span class="line"></span><br><span class="line">        span.style.display = &apos;block&apos;;</span><br><span class="line">        i.style.display = &apos;block&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //当前滚动条距离小于一个屏幕高度时隐藏回到顶部按钮</span><br><span class="line">        span.style.display = &apos;none&apos;;</span><br><span class="line">        i.style.display = &apos;none&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">span.addEventListener(&apos;click&apos;, function (e) &#123;</span><br><span class="line">    span.style.display = &apos;none&apos;; //单击后虽然设置为隐藏，但是由于滚动条顶部距离大于屏幕高度又触发上一个事件，使其又显示，所以当点击时需要阻止上一个事件发生；</span><br><span class="line">    i.style.display = &apos;none&apos;;</span><br><span class="line">    window.onscroll = null; //点击后阻止前一个DOM 0级事件  二级事件无法用此方法阻止</span><br><span class="line">    e = e || event;</span><br><span class="line">    var disTop = document.documentElement.scrollTop || document.body.scrollTop; //获取运动前滚动条顶部距离</span><br><span class="line">    var step = (disTop / timer) * frequency; //步长</span><br><span class="line">    //定时器：每隔一定频率运动距离</span><br><span class="line">    var intime = window.setInterval(function () &#123;</span><br><span class="line">        var curTop = document.documentElement.scrollTop || document.body.scrollTop; //获取滚动时当前滚动条距离</span><br><span class="line">        if (curTop === 0) &#123;</span><br><span class="line"></span><br><span class="line">            window.clearInterval(intime); //当距离为0时清除定时器</span><br><span class="line">            window.onscroll = show;</span><br><span class="line">            return; //中断执行</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            curTop -= step; //使当前滚动条距离每隔frequency时间在当前距离基础上减去原始步长</span><br><span class="line">        &#125;</span><br><span class="line">        //每隔frequency时间设置一次滚动条距离</span><br><span class="line">        document.documentElement.scrollTop = curTop;</span><br><span class="line">        document.body.scrollTop = curTop;</span><br><span class="line">    &#125;, frequency);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="列表随机颜色"><a href="#列表随机颜色" class="headerlink" title="列表随机颜色"></a>列表随机颜色</h3><pre><code>1.利用事件委托机制给父级DIV加一个mouseover事件2.mouseover在其子对象li上时触发事件，获取触发事件的目标(var elem = e.target;),对此目标进行操作3.定义一个数组存放十六进制数，用于组成随机十六进制颜色，生成6个随机数(0-15)作为数组下标，将对应值存入一个空数组并转为字符串，即为十六进制颜色。</code></pre><h4 id="随机颜色代码"><a href="#随机颜色代码" class="headerlink" title="随机颜色代码"></a>随机颜色代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var items = document.getElementsByTagName(&apos;li&apos;);</span><br><span class="line">var ul = document.getElementsByTagName(&apos;ul&apos;);</span><br><span class="line">// console.log(ul[0]);</span><br><span class="line">//事件委托：给父元素添加触发事件</span><br><span class="line">ul[0].addEventListener(&apos;mouseover&apos;, function (e) &#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    var elem = e.target; //获取目标</span><br><span class="line">    elem.style.background = null; // 每一次触发事件都先初始化</span><br><span class="line">    var num = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; //十六进制颜色</span><br><span class="line">    var colorNum = [];</span><br><span class="line">    do &#123;</span><br><span class="line">        var randomNum = Math.floor(Math.random() * 16); //0-15 //随机的0-15之间的一个数字作为十六进制数组下标</span><br><span class="line">        colorNum.push(num[randomNum]);</span><br><span class="line">    &#125; while (colorNum.length &lt; 6); //将获取的6个随机数到空数组</span><br><span class="line">    // console.log(colorNum);</span><br><span class="line">    var colorstr = colorNum.join(&apos;&apos;); //转为字符串</span><br><span class="line">    //   console.log(colorstr);</span><br><span class="line">    elem.style.background = &quot;#&quot; + colorstr; //设置随机颜色</span><br><span class="line">&#125;);</span><br><span class="line">//鼠标离开时清空颜色</span><br><span class="line">ul[0].addEventListener(&apos;mouseout&apos;, function (e) &#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    var elem = e.target;</span><br><span class="line">    elem.style.background = null;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="滑动模块"><a href="#滑动模块" class="headerlink" title="滑动模块"></a>滑动模块</h3><pre><code>1.与获取随机颜色原理相同，需要利用事件委托，通过给父元素DIV加点击事件获取目标事件2.获取所点击目标的ID值，寻找模块中CLASS值与ID值相同的模块，并获取其距离顶部高度3.需要设置过渡动画效果则与按钮部分相同需要设置运动总时间、总距离、频率等</code></pre><h4 id="滑动模块代码"><a href="#滑动模块代码" class="headerlink" title="滑动模块代码"></a>滑动模块代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ul[0].addEventListener(&apos;click&apos;, function (e) &#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    var liElem = e.target; //利用时间委托获取目标</span><br><span class="line">    var liName = liElem.getAttribute(&apos;id&apos;) //获取目标id值</span><br><span class="line">    var divName = document.getElementsByClassName(liName)[0]; //获取对应名称的DIV模块元素</span><br><span class="line">    var top = divName.offsetTop; //获取对应的滚动条高度</span><br><span class="line">    var timer = 500; //总时间</span><br><span class="line">    var frequencytwo = 3; //频率</span><br><span class="line">    if (top &lt; timer) &#123;</span><br><span class="line">        top += 500;</span><br><span class="line">    &#125;</span><br><span class="line">    var stepgo = (top / timer) * frequencytwo; //步长</span><br><span class="line">    //定时器：每隔一定频率运动距离</span><br><span class="line">    var intn = window.setInterval(function () &#123;</span><br><span class="line">        var curTop = document.documentElement.scrollTop || document.body.scrollTop; //获取滚动时当前滚动条距离</span><br><span class="line">        if (curTop === top) &#123;</span><br><span class="line">            window.clearInterval(intn); //当两者相同时清除定时器</span><br><span class="line">            return; //中断执行       </span><br><span class="line">        &#125;</span><br><span class="line">        if (curTop &gt; top) &#123;</span><br><span class="line">            curTop -= stepgo; //使当前滚动条距离每隔frequency时间在当前距离基础上减去原始步长    </span><br><span class="line">        &#125;</span><br><span class="line">        if (curTop &lt; top) &#123;</span><br><span class="line">            curTop += stepgo;</span><br><span class="line">        &#125;</span><br><span class="line">        //每隔frequency时间设置一次滚动条距离</span><br><span class="line">        document.documentElement.scrollTop = curTop;</span><br><span class="line">        document.body.scrollTop = curTop;</span><br><span class="line"></span><br><span class="line">    &#125;, frequencytwo);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code> 本人才疏学浅，暂时只能展示所知显浅部分，有误或可改进之处请留言告知 ◕‿-</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.右下角按钮回到顶部(点击后按钮消失，随即页面滑动到顶部;页面下拉距离超过一屏幕显示回到顶部按钮，反之按钮
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/jacascript/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
  </entry>
  
</feed>
