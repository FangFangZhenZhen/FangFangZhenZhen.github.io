<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fang&#39;Blog</title>
  
  <subtitle>心有猛虎，细嗅蔷薇。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fanguvw.xyz/"/>
  <updated>2018-09-28T13:52:09.054Z</updated>
  <id>http://fanguvw.xyz/</id>
  
  <author>
    <name>Fang Zhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AJAX兼容与惰性思想</title>
    <link href="http://fanguvw.xyz/2018/09/28/AJAX/"/>
    <id>http://fanguvw.xyz/2018/09/28/AJAX/</id>
    <published>2018-09-28T13:50:21.000Z</published>
    <updated>2018-09-28T13:52:09.054Z</updated>
    
    <content type="html"><![CDATA[<p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;## &lt;/p&gt;

      
    
    </summary>
    
      <category term="Ajax" scheme="http://fanguvw.xyz/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://fanguvw.xyz/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>AJAX兼容与惰性思想</title>
    <link href="http://fanguvw.xyz/2018/09/28/AJAX%E5%85%BC%E5%AE%B9/"/>
    <id>http://fanguvw.xyz/2018/09/28/AJAX兼容/</id>
    <published>2018-09-28T13:50:21.000Z</published>
    <updated>2018-09-28T14:15:53.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS编程技巧-惰性思想"><a href="#JS编程技巧-惰性思想" class="headerlink" title="JS编程技巧:惰性思想"></a>JS编程技巧:惰性思想</h2><pre><code>所谓的惰性思想可以简单地理解为:只执行一次可以搞定的事，绝不执行多次。</code></pre><h3 id="惰性思想代码块"><a href="#惰性思想代码块" class="headerlink" title="惰性思想代码块:"></a>惰性思想代码块:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var utils=(function()&#123;</span><br><span class="line">    var flag=&quot;getComputedStyle&quot; in window; //若返回true则为标准浏览器，false为IE8及以下浏览器 </span><br><span class="line">    function getCss()&#123;</span><br><span class="line">        if(flag)&#123;  //因为以上已判断此浏览器结果并保存,直接使用flag而不需要用window.getComputedStyle判断</span><br><span class="line">            </span><br><span class="line">        &#125;else&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return&#123;</span><br><span class="line">        getCss:getCss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">utils.getCss(); </span><br><span class="line">utils.getCss();</span><br><span class="line">utils.getCss();</span><br></pre></td></tr></table></figure><h2 id="惰性思想创建AJAX对象"><a href="#惰性思想创建AJAX对象" class="headerlink" title="惰性思想创建AJAX对象"></a>惰性思想创建AJAX对象</h2><pre><code>利用函数创建且兼容所有浏览器</code></pre><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var createXHR = function () &#123;</span><br><span class="line">    var xhr = null,</span><br><span class="line">        flag=false, //判断浏览器是否支持AJAX</span><br><span class="line">        // 定义一个数组用于存放创建AJAX对象的各种方法</span><br><span class="line">        arr = [</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new XMLHttpRequest(); //只兼容IE7及以上 </span><br><span class="line">            &#125;,</span><br><span class="line">            // 以下三种方法兼容低版本浏览器</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            function () &#123;</span><br><span class="line">                return new ActiveXObject(&quot;Msxml3.XMLHTTP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        ];</span><br><span class="line">    //  遍历这个数组中的小方法,当可用时即可取用</span><br><span class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        var curFn = arr[i]; //获取当前遍历到的小方法</span><br><span class="line">        try &#123;</span><br><span class="line">            // 本次循环获取的方法执行没有报错：说明此方法可用，下次直接执行此小方法即可=&gt;将createXHR重写为此小方法</span><br><span class="line">            xhr = curFn();</span><br><span class="line">            createXHR = curFn;    </span><br><span class="line">            flag = true; //浏览器可兼容AJAX则为true;</span><br><span class="line">            break; //结束循环</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            //本次获取的方法执行报错则继续循环遍历下一个方法</span><br><span class="line">        &#125;</span><br><span class="line">        if (!flag) &#123; </span><br><span class="line">            throw new Error(&quot;please updata your brower&quot;); //浏览器不支持AJAX时抛出错误</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return xhr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS编程技巧-惰性思想&quot;&gt;&lt;a href=&quot;#JS编程技巧-惰性思想&quot; class=&quot;headerlink&quot; title=&quot;JS编程技巧:惰性思想&quot;&gt;&lt;/a&gt;JS编程技巧:惰性思想&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;所谓的惰性思想可以简单地理解为:只执行一次可以搞定的
      
    
    </summary>
    
      <category term="Ajax" scheme="http://fanguvw.xyz/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://fanguvw.xyz/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>旋转的八卦图</title>
    <link href="http://fanguvw.xyz/2018/09/17/%E6%97%8B%E8%BD%AC%E7%9A%84%E5%85%AB%E5%8D%A6%E5%9B%BE/"/>
    <id>http://fanguvw.xyz/2018/09/17/旋转的八卦图/</id>
    <published>2018-09-17T13:31:30.000Z</published>
    <updated>2018-09-18T07:00:14.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用JS或CSS3结合Canvas实现八卦图旋转"><a href="#利用JS或CSS3结合Canvas实现八卦图旋转" class="headerlink" title="利用JS或CSS3结合Canvas实现八卦图旋转"></a>利用JS或CSS3结合Canvas实现八卦图旋转</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用JS或CSS3结合Canvas实现八卦图旋转&quot;&gt;&lt;a href=&quot;#利用JS或CSS3结合Canvas实现八卦图旋转&quot; class=&quot;headerlink&quot; title=&quot;利用JS或CSS3结合Canvas实现八卦图旋转&quot;&gt;&lt;/a&gt;利用JS或CSS3结合Can
      
    
    </summary>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/categories/canvas/"/>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/canvas/jacascript/"/>
    
      <category term="Css" scheme="http://fanguvw.xyz/categories/canvas/jacascript/css/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/tags/canvas/"/>
    
      <category term="Css" scheme="http://fanguvw.xyz/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>原生JS实现跑马灯</title>
    <link href="http://fanguvw.xyz/2018/09/17/%E8%B7%91%E9%A9%AC%E7%81%AF/"/>
    <id>http://fanguvw.xyz/2018/09/17/跑马灯/</id>
    <published>2018-09-17T13:26:12.000Z</published>
    <updated>2018-09-17T13:36:06.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原生JS实现跑马灯"><a href="#原生JS实现跑马灯" class="headerlink" title="原生JS实现跑马灯"></a>原生JS实现跑马灯</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原生JS实现跑马灯&quot;&gt;&lt;a href=&quot;#原生JS实现跑马灯&quot; class=&quot;headerlink&quot; title=&quot;原生JS实现跑马灯&quot;&gt;&lt;/a&gt;原生JS实现跑马灯&lt;/h2&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/jacascript/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
  </entry>
  
  <entry>
    <title>贪吃蛇了解一下</title>
    <link href="http://fanguvw.xyz/2018/09/15/%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    <id>http://fanguvw.xyz/2018/09/15/贪吃蛇/</id>
    <published>2018-09-15T11:24:59.000Z</published>
    <updated>2018-09-17T13:28:04.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用Canvas与JavaScript实现贪吃蛇"><a href="#利用Canvas与JavaScript实现贪吃蛇" class="headerlink" title="利用Canvas与JavaScript实现贪吃蛇"></a>利用Canvas与JavaScript实现贪吃蛇</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用Canvas与JavaScript实现贪吃蛇&quot;&gt;&lt;a href=&quot;#利用Canvas与JavaScript实现贪吃蛇&quot; class=&quot;headerlink&quot; title=&quot;利用Canvas与JavaScript实现贪吃蛇&quot;&gt;&lt;/a&gt;利用Canvas与JavaS
      
    
    </summary>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/categories/canvas/"/>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/canvas/jacascript/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
      <category term="Canvas" scheme="http://fanguvw.xyz/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>原生JS实现回到页面顶部</title>
    <link href="http://fanguvw.xyz/2018/09/14/%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8/"/>
    <id>http://fanguvw.xyz/2018/09/14/原生JS实现回到顶部/</id>
    <published>2018-09-14T12:47:53.846Z</published>
    <updated>2018-09-17T13:25:27.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><pre><code>1.右下角按钮回到顶部(点击后按钮消失，随即页面滑动到顶部;页面下拉距离超过一屏幕显示回到顶部按钮，反之按钮消失)2.列表hover时显示随机颜色(利用时间委托机制)3.点击左侧列表，页面滑动到对应模块(通过获取所点击列表的ID值滑动到对应CLASS值相同的模块)</code></pre><p><a href="https://github.com/FangFangZhenZhen/Example/blob/master/toTop.html" target="_blank" rel="noopener">点击查看源代码</a></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="回到顶部按钮"><a href="#回到顶部按钮" class="headerlink" title="回到顶部按钮"></a>回到顶部按钮</h3><pre><code>1.获取当前scrollTop距离（var distance=document.documentElement.scrollTop||document.body.scrollTop）2.总时间(var timer=500;单位：ms)  总共需要运动500ms3.频率( var frequency=10;单位：ms) 每10ms运动一次4.步长(var step=distance/timer*frequency)  每毫秒运动距离*频率=每一次运动所需步长</code></pre><h4 id="回到顶部代码"><a href="#回到顶部代码" class="headerlink" title="回到顶部代码"></a>回到顶部代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">var span = document.getElementsByTagName(&apos;span&apos;)[0];</span><br><span class="line">var i = document.getElementsByTagName(&apos;i&apos;)[0];</span><br><span class="line">var timer = 1000; //总时间</span><br><span class="line">var frequency = 5; //频率</span><br><span class="line">window.onscroll = show;</span><br><span class="line">function show() &#123;</span><br><span class="line">    var dis = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">    var windis = window.screen.height; //屏幕分辨率高度</span><br><span class="line">    // console.log(windis); </span><br><span class="line">    //当前滚动条距离大于一个屏幕高度时显示回到顶部按钮</span><br><span class="line">    if (dis &gt;= windis) &#123;</span><br><span class="line"></span><br><span class="line">        span.style.display = &apos;block&apos;;</span><br><span class="line">        i.style.display = &apos;block&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //当前滚动条距离小于一个屏幕高度时隐藏回到顶部按钮</span><br><span class="line">        span.style.display = &apos;none&apos;;</span><br><span class="line">        i.style.display = &apos;none&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">span.addEventListener(&apos;click&apos;, function (e) &#123;</span><br><span class="line">    span.style.display = &apos;none&apos;; //单击后虽然设置为隐藏，但是由于滚动条顶部距离大于屏幕高度又触发上一个事件，使其又显示，所以当点击时需要阻止上一个事件发生；</span><br><span class="line">    i.style.display = &apos;none&apos;;</span><br><span class="line">    window.onscroll = null; //点击后阻止前一个DOM 0级事件  二级事件无法用此方法阻止</span><br><span class="line">    e = e || event;</span><br><span class="line">    var disTop = document.documentElement.scrollTop || document.body.scrollTop; //获取运动前滚动条顶部距离</span><br><span class="line">    var step = (disTop / timer) * frequency; //步长</span><br><span class="line">    //定时器：每隔一定频率运动距离</span><br><span class="line">    var intime = window.setInterval(function () &#123;</span><br><span class="line">        var curTop = document.documentElement.scrollTop || document.body.scrollTop; //获取滚动时当前滚动条距离</span><br><span class="line">        if (curTop === 0) &#123;</span><br><span class="line"></span><br><span class="line">            window.clearInterval(intime); //当距离为0时清除定时器</span><br><span class="line">            window.onscroll = show;</span><br><span class="line">            return; //中断执行</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            curTop -= step; //使当前滚动条距离每隔frequency时间在当前距离基础上减去原始步长</span><br><span class="line">        &#125;</span><br><span class="line">        //每隔frequency时间设置一次滚动条距离</span><br><span class="line">        document.documentElement.scrollTop = curTop;</span><br><span class="line">        document.body.scrollTop = curTop;</span><br><span class="line">    &#125;, frequency);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="列表随机颜色"><a href="#列表随机颜色" class="headerlink" title="列表随机颜色"></a>列表随机颜色</h3><pre><code>1.利用事件委托机制给父级DIV加一个mouseover事件2.mouseover在其子对象li上时触发事件，获取触发事件的目标(var elem = e.target;),对此目标进行操作3.定义一个数组存放十六进制数，用于组成随机十六进制颜色，生成6个随机数(0-15)作为数组下标，将对应值存入一个空数组并转为字符串，即为十六进制颜色。</code></pre><h4 id="随机颜色代码"><a href="#随机颜色代码" class="headerlink" title="随机颜色代码"></a>随机颜色代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var items = document.getElementsByTagName(&apos;li&apos;);</span><br><span class="line">var ul = document.getElementsByTagName(&apos;ul&apos;);</span><br><span class="line">// console.log(ul[0]);</span><br><span class="line">//事件委托：给父元素添加触发事件</span><br><span class="line">ul[0].addEventListener(&apos;mouseover&apos;, function (e) &#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    var elem = e.target; //获取目标</span><br><span class="line">    elem.style.background = null; // 每一次触发事件都先初始化</span><br><span class="line">    var num = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; //十六进制颜色</span><br><span class="line">    var colorNum = [];</span><br><span class="line">    do &#123;</span><br><span class="line">        var randomNum = Math.floor(Math.random() * 16); //0-15 //随机的0-15之间的一个数字作为十六进制数组下标</span><br><span class="line">        colorNum.push(num[randomNum]);</span><br><span class="line">    &#125; while (colorNum.length &lt; 6); //将获取的6个随机数到空数组</span><br><span class="line">    // console.log(colorNum);</span><br><span class="line">    var colorstr = colorNum.join(&apos;&apos;); //转为字符串</span><br><span class="line">    //   console.log(colorstr);</span><br><span class="line">    elem.style.background = &quot;#&quot; + colorstr; //设置随机颜色</span><br><span class="line">&#125;);</span><br><span class="line">//鼠标离开时清空颜色</span><br><span class="line">ul[0].addEventListener(&apos;mouseout&apos;, function (e) &#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    var elem = e.target;</span><br><span class="line">    elem.style.background = null;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="滑动模块"><a href="#滑动模块" class="headerlink" title="滑动模块"></a>滑动模块</h3><pre><code>1.与获取随机颜色原理相同，需要利用事件委托，通过给父元素DIV加点击事件获取目标事件2.获取所点击目标的ID值，寻找模块中CLASS值与ID值相同的模块，并获取其距离顶部高度3.需要设置过渡动画效果则与按钮部分相同需要设置运动总时间、总距离、频率等</code></pre><h4 id="滑动模块代码"><a href="#滑动模块代码" class="headerlink" title="滑动模块代码"></a>滑动模块代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">ul[0].addEventListener(&apos;click&apos;, function (e) &#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    var liElem = e.target; //利用时间委托获取目标</span><br><span class="line">    var liName = liElem.getAttribute(&apos;id&apos;) //获取目标id值</span><br><span class="line">    var divName = document.getElementsByClassName(liName)[0]; //获取对应名称的DIV模块元素</span><br><span class="line">    var top = divName.offsetTop; //获取对应的滚动条高度</span><br><span class="line">    var timer = 500; //总时间</span><br><span class="line">    var frequencytwo = 3; //频率</span><br><span class="line">    if (top &lt; timer) &#123;</span><br><span class="line">        top += 500;</span><br><span class="line">    &#125;</span><br><span class="line">    var stepgo = (top / timer) * frequencytwo; //步长</span><br><span class="line">    //定时器：每隔一定频率运动距离</span><br><span class="line">    var intn = window.setInterval(function () &#123;</span><br><span class="line">        var curTop = document.documentElement.scrollTop || document.body.scrollTop; //获取滚动时当前滚动条距离</span><br><span class="line">        if (curTop === top) &#123;</span><br><span class="line">            window.clearInterval(intn); //当两者相同时清除定时器</span><br><span class="line">            return; //中断执行       </span><br><span class="line">        &#125;</span><br><span class="line">        if (curTop &gt; top) &#123;</span><br><span class="line">            curTop -= stepgo; //使当前滚动条距离每隔frequency时间在当前距离基础上减去原始步长    </span><br><span class="line">        &#125;</span><br><span class="line">        if (curTop &lt; top) &#123;</span><br><span class="line">            curTop += stepgo;</span><br><span class="line">        &#125;</span><br><span class="line">        //每隔frequency时间设置一次滚动条距离</span><br><span class="line">        document.documentElement.scrollTop = curTop;</span><br><span class="line">        document.body.scrollTop = curTop;</span><br><span class="line"></span><br><span class="line">    &#125;, frequencytwo);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code> 本人才疏学浅，暂时只能展示所知显浅部分，有误或可改进之处请留言告知 ◕‿-</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.右下角按钮回到顶部(点击后按钮消失，随即页面滑动到顶部;页面下拉距离超过一屏幕显示回到顶部按钮，反之按钮
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/categories/jacascript/"/>
    
    
      <category term="JavaScript" scheme="http://fanguvw.xyz/tags/jacascript/"/>
    
  </entry>
  
</feed>
